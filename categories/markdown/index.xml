<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Markdown - Category - Will Vim Bog</title><link>https://wlcsm.github.io/categories/markdown/</link><description>Markdown - Category - Will Vim Bog</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 01 Dec 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://wlcsm.github.io/categories/markdown/" rel="self" type="application/rss+xml"/><item><title>Basic Markdown Syntax</title><link>https://wlcsm.github.io/basic-markdown-syntax/</link><pubDate>Sun, 01 Dec 2019 00:00:00 +0000</pubDate><author>Author</author><guid>https://wlcsm.github.io/basic-markdown-syntax/</guid><description>&lt;p>This article offers a sample of basic Markdown syntax that can be used in Hugo content files.&lt;/p></description></item><item><title>A Vim Purist's Workflow</title><link>https://wlcsm.github.io/vim-workflow/</link><pubDate>Tue, 01 Oct 2019 00:00:00 +0000</pubDate><author>Author</author><guid>https://wlcsm.github.io/vim-workflow/</guid><description>I have been using Vim for about 1.5 years now and I am constantly surprised about how many features it has.
Despite using it for many smaller projected, I wasn&amp;rsquo;t sold on using Vim as my main programming environment, and even then, it was only with CoC installed to essentially replicate VS Code in Vim. Until I stumbled across this video by Leeren at VimConf . This completely blew my mind (as did his other videos on Vim).</description></item><item><title>Emoji Support</title><link>https://wlcsm.github.io/emoji-support/</link><pubDate>Tue, 01 Oct 2019 00:00:00 +0000</pubDate><author>Author</author><guid>https://wlcsm.github.io/emoji-support/</guid><description>&lt;p>Emoji can be enabled in a Hugo project in a number of ways.&lt;/p></description></item><item><title>Vim's Quickfix/Location list</title><link>https://wlcsm.github.io/vim-lesson-quickfix-list/</link><pubDate>Tue, 01 Oct 2019 00:00:00 +0000</pubDate><author>Author</author><guid>https://wlcsm.github.io/vim-lesson-quickfix-list/</guid><description>People often complain that Vim doesn&amp;rsquo;t have good support for project-wide searches or error navigation without the use of plugins or even LSPs. These people have clearly never learned about Vim&amp;rsquo;s inbuilt quickfix and location list.
Quickfix list The quickfix list is a buffer in Vim which provides fast navigation to locations in files.
Differences between the Quickfix and Location list The two are exactly the same, however there is only one quickfix list per Vim session, but there is one location list for every window.</description></item><item><title>Vim for Software Development</title><link>https://wlcsm.github.io/vim-as-developer/</link><pubDate>Tue, 01 Oct 2019 00:00:00 +0000</pubDate><author>Author</author><guid>https://wlcsm.github.io/vim-as-developer/</guid><description>Most people think Vim is an outdated piece of software development, useful perhaps editing small files over SSH, but surely no one uses it as their main code development tool right?
Here I am going to go through what I think are the key components to a normal software development. Of course, Vim doesn&amp;rsquo;t give you the complex build environemtns of a proper IDE, but if you are working comfortably in another text editor like VS Code or Sublime Text, then theres a good chance that everything you are doing can be done in vanilla Vim.</description></item></channel></rss>