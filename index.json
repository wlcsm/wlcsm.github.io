[{"categories":["documentation"],"content":"Discover what the Hugo - LoveIt theme is all about and the core-concepts behind it.","date":"2020-03-06","objectID":"/theme-documentation-basics/","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"Discover what the Hugo - LoveIt theme is all about and the core-concepts behind it. ","date":"2020-03-06","objectID":"/theme-documentation-basics/:0:0","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"1 Requirements Thanks to the simplicity of Hugo, Hugo is the only dependency of this theme. Just install latest version of  Hugo (\u003e 0.62.0) for your OS (Windows, Linux, macOS). Why not support earlier versions of Hugo? Since Markdown Render Hooks was introduced in the Hugo Christmas Edition, this theme only supports Hugo versions above 0.62.0. Hugo extended version is recommended Since some features of this theme need to processes  SCSS to  CSS, it is recommended to use Hugo extended version for better experience. ","date":"2020-03-06","objectID":"/theme-documentation-basics/:1:0","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"2 Installation The following steps are here to help you initialize your new website. If you don’t know Hugo at all, we strongly suggest you learn more about it by following this great documentation for beginners. ","date":"2020-03-06","objectID":"/theme-documentation-basics/:2:0","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.1 Create Your Project Hugo provides a new command to create a new website: hugo new site my_website cd my_website ","date":"2020-03-06","objectID":"/theme-documentation-basics/:2:1","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.2 Install the Theme The LoveIt theme’s repository is: https://github.com/dillonzq/LoveIt. You can download the latest release  .zip file of the theme and extract it in the themes directory. Alternatively, clone this repository to the themes directory: git clone https://github.com/dillonzq/LoveIt.git themes/LoveIt Or, create an empty git repository and make this repository a submodule of your site directory: git init git submodule add https://github.com/dillonzq/LoveIt.git themes/LoveIt ","date":"2020-03-06","objectID":"/theme-documentation-basics/:2:2","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.3 Basic Configuration The following is a basic configuration for the LoveIt theme: baseURL = \"http://example.org/\" # [en, zh-cn, fr, ...] determines default content language defaultContentLanguage = \"en\" # language code languageCode = \"en\" title = \"My New Hugo Site\" # Change the default theme to be use when building the site with Hugo theme = \"LoveIt\" [params] # LoveIt theme version version = \"0.2.X\" [menu] [[menu.main]] identifier = \"posts\" # you can add extra information before the name (HTML format is supported), such as icons pre = \"\" # you can add extra information after the name (HTML format is supported), such as icons post = \"\" name = \"Posts\" url = \"/posts/\" # title will be shown when you hover on this menu link title = \"\" weight = 1 [[menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"Tags\" url = \"/tags/\" title = \"\" weight = 2 [[menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"Categories\" url = \"/categories/\" title = \"\" weight = 3 # Markup related configuration in Hugo [markup] # Syntax Highlighting (https://gohugo.io/content-management/syntax-highlighting) [markup.highlight] # false is a necessary configuration (https://github.com/dillonzq/LoveIt/issues/158) noClasses = false Note When building the website, you can set a theme by using --theme option. However, we suggest you modify the configuration file (config.toml) and set the theme as the default. ","date":"2020-03-06","objectID":"/theme-documentation-basics/:2:3","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.4 Create Your First Post Here is the way to create your first post: hugo new posts/first_post.md Feel free to edit the post file by adding some sample content and replacing the title value in the beginning of the file. Note By default all posts and pages are created as a draft. If you want to render these pages, remove the property draft: true from the metadata, set the property draft: false or add -D/--buildDrafts parameter to hugo command. ","date":"2020-03-06","objectID":"/theme-documentation-basics/:2:4","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.5 Launching the Website Locally Launch by using the following command: hugo serve Go to http://localhost:1313. Basic configuration previewBasic configuration preview \" Basic configuration preview Tip When you run hugo serve, when the contents of the files change, the page automatically refreshes with the changes. Note Since the theme use .Scratch in Hugo to implement some features, it is highly recommended that you add --disableFastRender parameter to hugo server command for the live preview of the page you are editing. hugo serve --disableFastRender ","date":"2020-03-06","objectID":"/theme-documentation-basics/:2:5","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.6 Build the Website When your site is ready to deploy, run the following command: hugo A public folder will be generated, containing all static content and assets for your website. It can now be deployed on any web server. Tip The website can be automatically published and hosted with Netlify (Read more about Automated HUGO deployments with Netlify). Alternatively, you can use AWS Amplify, Github pages, Render and more… ","date":"2020-03-06","objectID":"/theme-documentation-basics/:2:6","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"3 Configuration ","date":"2020-03-06","objectID":"/theme-documentation-basics/:3:0","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"3.1 Site Configuration In addition to Hugo global configuration and menu configuration, LoveIt lets you define the following parameters in your site configuration (here is a config.toml, whose values are default). Please open the code block below to view the complete sample configuration : [params] # LoveIt theme version version = \"0.2.X\" # site description description = \"This is My New Hugo Site\" # site keywords keywords = [\"Theme\", \"Hugo\"] # site default theme (\"light\", \"dark\", \"auto\") defaultTheme = \"auto\" # public git repo url only then enableGitInfo is true gitRepo = \"\" # which hash function used for SRI, when empty, no SRI is used # (\"sha256\", \"sha384\", \"sha512\", \"md5\") fingerprint = \"\" # date format dateFormat = \"2006-01-02\" # website images for Open Graph and Twitter Cards images = [\"/logo.png\"] # App icon config [params.app] # optional site title override for the app when added to an iOS home screen or Android launcher title = \"LoveIt\" # whether to omit favicon resource links noFavicon = false # modern SVG favicon to use in place of older style .png and .ico files svgFavicon = \"\" # Android browser theme color themeColor = \"#ffffff\" # Safari mask icon color iconColor = \"#5bbad5\" # Windows v8-10 tile color tileColor = \"#da532c\" # Search config [params.search] enable = true # type of search engine (\"lunr\", \"algolia\") type = \"lunr\" # max index length of the chunked content contentLength = 4000 # placeholder of the search bar placeholder = \"\" # max number of results length maxResultLength = 10 # snippet length of the result snippetLength = 30 # HTML tag name of the highlight part in results highlightTag = \"em\" # whether to use the absolute URL based on the baseURL in search index absoluteURL = false [params.search.algolia] index = \"\" appID = \"\" searchKey = \"\" # Header config [params.header] # desktop header mode (\"fixed\", \"normal\", \"auto\") desktopMode = \"fixed\" # mobile header mode (\"fixed\", \"normal\", \"auto\") mobileMode = \"auto\" # Header title config [params.header.title] # URL of the LOGO logo = \"\" # title name name = \"\" # you can add extra information before the name (HTML format is supported), such as icons pre = \"\" # you can add extra information after the name (HTML format is supported), such as icons post = \"\" # whether to use typeit animation for title name typeit = false # Footer config [params.footer] enable = true # Custom content (HTML format is supported) custom = '' # whether to show Hugo and theme info hugo = true # whether to show copyright info copyright = true # whether to show the author author = true # Site creation time since = 2019 # ICP info only in China (HTML format is supported) icp = \"\" # license info (HTML format is supported) license = '\u003ca rel=\"license external nofollow noopener noreffer\" href=\"https://creativecommons.org/licenses/by-nc/4.0/\" target=\"_blank\"\u003eCC BY-NC 4.0\u003c/a\u003e' # Section (all posts) page config [params.section] # special amount of posts in each section page paginate = 20 # date format (month and day) dateFormat = \"01-02\" # amount of RSS pages rss = 10 # List (category or tag) page config [params.list] # special amount of posts in each list page paginate = 20 # date format (month and day) dateFormat = \"01-02\" # amount of RSS pages rss = 10 # Home page config [params.home] # amount of RSS pages rss = 10 # Home page profile [params.home.profile] enable = true # Gravatar Email for preferred avatar in home page gravatarEmail = \"\" # URL of avatar shown in home page avatarURL = \"/images/avatar.png\" # title shown in home page (HTML format is supported) title = \"\" # subtitle shown in home page subtitle = \"This is My New Hugo Site\" # whether to use typeit animation for subtitle typeit = true # whether to show social links social = true # disclaimer (HTML format is supported) disclaimer = \"\" # Home page posts [params.home.posts] enable = true # special amount of posts in each home posts page paginate = 6 # replaced with hiddenFromHomePage in params.page # default behavior when you don't set ","date":"2020-03-06","objectID":"/theme-documentation-basics/:3:1","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"3.2 Favicons, Browserconfig, Manifest It is recommended to put your own favicons: apple-touch-icon.png (180x180) favicon-32x32.png (32x32) favicon-16x16.png (16x16) mstile-150x150.png (150x150) android-chrome-192x192.png (192x192) android-chrome-512x512.png (512x512) into /static. They’re easily created via https://realfavicongenerator.net/. Customize browserconfig.xml and site.webmanifest to set theme-color and background-color. ","date":"2020-03-06","objectID":"/theme-documentation-basics/:3:2","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"3.3 Style Customization Note Hugo extended version is necessary for the style customization. LoveIt theme has been built to be as configurable as possible by defining custom .scss style files. The directory including the custom .scss style files is assets/css relative to your project root directory. In assets/css/_override.scss, you can override the variables in themes/LoveIt/assets/css/_variables.scss to customize the style. Here is a example: @import url('https://fonts.googleapis.com/css?family=Fira+Mono:400,700\u0026display=swap\u0026subset=latin-ext'); $code-font-family: Fira Mono, Source Code Pro, Menlo, Consolas, Monaco, monospace; In assets/css/_custom.scss, you can add some css style code to customize the style. ","date":"2020-03-06","objectID":"/theme-documentation-basics/:3:3","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"4 Multilingual and i18n LoveIt theme is fully compatible with Hugo multilingual mode, which provides in-browser language switching. Language SwitchLanguage Switch \" Language Switch ","date":"2020-03-06","objectID":"/theme-documentation-basics/:4:0","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"4.1 Compatibility Language Hugo Code HTML lang Attribute Theme Docs Lunr.js Support English en en Simplified Chinese zh-cn zh-CN French fr fr Polish pl pl Brazilian Portuguese pt-br pt-BR Italian it it Spanish es es German de de German de de Serbian sr sr Russian ru ru Romanian ro ro Vietnamese vi vi ","date":"2020-03-06","objectID":"/theme-documentation-basics/:4:1","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"4.2 Basic Configuration After learning how Hugo handle multilingual websites, define your languages in your site configuration. For example with English, Chinese and French website: # [en, zh-cn, fr, pl, ...] determines default content language defaultContentLanguage = \"en\" [languages] [languages.en] weight = 1 title = \"My New Hugo Site\" languageCode = \"en\" languageName = \"English\" [[languages.en.menu.main]] identifier = \"posts\" pre = \"\" post = \"\" name = \"Posts\" url = \"/posts/\" title = \"\" weight = 1 [[languages.en.menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"Tags\" url = \"/tags/\" title = \"\" weight = 2 [[languages.en.menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"Categories\" url = \"/categories/\" title = \"\" weight = 3 [languages.zh-cn] weight = 2 title = \"我的全新 Hugo 网站\" # language code, CN only here languageCode = \"zh-CN\" languageName = \"简体中文\" # whether to include Chinese/Japanese/Korean hasCJKLanguage = true [[languages.zh-cn.menu.main]] identifier = \"posts\" pre = \"\" post = \"\" name = \"文章\" url = \"/posts/\" title = \"\" weight = 1 [[languages.zh-cn.menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"标签\" url = \"/tags/\" title = \"\" weight = 2 [[languages.zh-cn.menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"分类\" url = \"/categories/\" title = \"\" weight = 3 [languages.fr] weight = 3 title = \"Mon nouveau site Hugo\" languageCode = \"fr\" languageName = \"Français\" [[languages.fr.menu.main]] identifier = \"posts\" pre = \"\" post = \"\" name = \"Postes\" url = \"/posts/\" title = \"\" weight = 1 [[languages.fr.menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"Balises\" url = \"/tags/\" title = \"\" weight = 2 [[languages.fr.menu.main]] identifier = \"categories\" name = \"Catégories\" pre = \"\" post = \"\" url = \"/categories/\" title = \"\" weight = 3 Then, for each new page, append the language code to the file name. Single file my-page.md is split in three files: in English: my-page.en.md in Chinese: my-page.zh-cn.md in French: my-page.fr.md Note Be aware that only translated pages are displayed in menu. It’s not replaced with default language content. Tip Use Front Matter parameter to translate urls too. ","date":"2020-03-06","objectID":"/theme-documentation-basics/:4:2","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"4.3 Overwrite Translation Strings Translations strings are used for common default values used in the theme. Translations are available in some languages, but you may use another language or want to override default values. To override these values, create a new file in your local i18n folder i18n/\u003clanguageCode\u003e.toml and inspire yourself from themes/LoveIt/i18n/en.toml. By the way, as these translations could be used by other people, please take the time to propose a translation by  making a PR to the theme! ","date":"2020-03-06","objectID":"/theme-documentation-basics/:4:3","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"5 Search Based on Lunr.js or algolia, searching is supported in LoveIt theme. ","date":"2020-03-06","objectID":"/theme-documentation-basics/:5:0","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"5.1 Output Configuration In order to generate index.json for searching, add JSON output file type to the home of the outputs part in your site configuration. [outputs] home = [\"HTML\", \"RSS\", \"JSON\"] ","date":"2020-03-06","objectID":"/theme-documentation-basics/:5:1","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"5.2 Search Configuration Based on index.json generated by Hugo, you could activate searching. Here is the search configuration in your site configuration: [params.search] enable = true # type of search engine (\"lunr\", \"algolia\") type = \"lunr\" # max index length of the chunked content contentLength = 4000 # placeholder of the search bar placeholder = \"\" # max number of results length maxResultLength = 10 # snippet length of the result snippetLength = 30 # HTML tag name of the highlight part in results highlightTag = \"em\" # whether to use the absolute URL based on the baseURL in search index absoluteURL = false [params.search.algolia] index = \"\" appID = \"\" searchKey = \"\" How to choose search engine? The following is a comparison of two search engines: lunr: simple, no need to synchronize index.json, no limit for contentLength, but high bandwidth and low performance (Especially for Chinese which needs a large segmentit library) algolia: high performance and low bandwidth, but need to synchronize index.json and limit for contentLength The content of the post is separated by h2 and h3 HTML tag to improve query performance and basically implement full-text search. contentLength is used to limit the max index length of the part starting with h2 and h3 HTML tag. Tips about algolia You need to upload index.json files to algolia to activate searching. You could upload the index.json files by browsers but a CLI tool may be better. Algolia Atomic is a good choice. To be compatible with Hugo multilingual mode, you need to upload different index.json for each language to the different index of algolia, such as zh-cn/index.json or fr/index.json… ","date":"2020-03-06","objectID":"/theme-documentation-basics/:5:2","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"Find out how to create and organize your content quickly and intuitively in LoveIt theme.","date":"2020-03-05","objectID":"/theme-documentation-content/","tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"Find out how to create and organize your content quickly and intuitively in LoveIt theme. ","date":"2020-03-05","objectID":"/theme-documentation-content/:0:0","tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"1 Contents Organization A few suggestions to help you get a good looking site quickly: Keep post pages in the content/posts directory, for example: content/posts/my-first-post.md Keep other pages in the content directory, for example: content/about.md Local resources organization Local Resource Reference There are three ways to reference local resources such as images and music: Using page resources in page bundles. You can reference page resources by the value for Resources.GetMatch or the filepath of the resource relative to the page directory directly. Store resources in the assets directory, which is /assets by default. The filepath of the resource to reference in the post is relative to the assets directory. Store resources in the static directory, which is /static by default. The filepath of the resource to reference in the post is relative to the static directory. The priority of references is also in the above order. There are many places in the theme where the above local resource references can be used, such as links, images, image shortcode, music shortcode and some params in the front matter. Images in page resources or assets directory processing will be supported in the future. It’s really cool! ","date":"2020-03-05","objectID":"/theme-documentation-content/:1:0","tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"2 Front Matter Hugo allows you to add front matter in yaml, toml or json to your content files. Note Not all of the below front matters need to be set in each of your posts. It is necessary only if the front matters and the page part in your site configuration are inconsistent. Here is a front matter example: ---title:\"My First Post\"subtitle:\"\"date:2020-03-04T15:58:26+08:00lastmod:2020-03-04T15:58:26+08:00draft:trueauthor:\"\"authorLink:\"\"description:\"\"license:\"\"images:[]tags:[]categories:[]featuredImage:\"\"featuredImagePreview:\"\"hiddenFromHomePage:falsehiddenFromSearch:falsetwemoji:falselightgallery:trueruby:truefraction:truefontawesome:truelinkToMarkdown:truerssFullText:falsetoc:enable:trueauto:truecode:copy:true# ...math:enable:true# ...mapbox:accessToken:\"\"# ...share:enable:true# ...comment:enable:true# ...library:css:# someCSS = \"some.css\"# located in \"assets/\"# Or# someCSS = \"https://cdn.example.com/some.css\"js:# someJS = \"some.js\"# located in \"assets/\"# Or# someJS = \"https://cdn.example.com/some.js\"seo:images:[]# ...--- title: the title for the content. subtitle: the subtitle for the content. date: the datetime assigned to this page, which is usually fetched from the date field in front matter, but this behaviour is configurabl in the site configuration. lastmod: the datetime at which the content was last modified. draft: if true, the content will not be rendered unless the --buildDrafts/-D flag is passed to the hugo command. author: the author for the content. authorLink: the link of the author. description: the description for the content. license: the special lisence for this content. images: page images for Open Graph and Twitter Cards. tags: the tags for the content. categories: the categories for the content. featuredImage: the featured image for the content. featuredImagePreview: the featured image for the content preview in the home page. hiddenFromHomePage: if true, the content will not be shown in the home page. hiddenFromSearch: if true, the content will not be shown in the search results. twemoji: if true, the content will enable the twemoji. lightgallery: if true, images in the content will be shown as the gallery. ruby: if true, the content will enable the ruby extended syntax. fraction: if true, the content will enable the fraction extended syntax. fontawesome: if true, the content will enable the Font Awesome extended syntax. linkToMarkdown: if true, the footer of the content will be shown the link to the orignal Markdown file. rssFullText: if true, the full text content will be shown in RSS. toc: the same as the params.page.toc part in the site configuration. code: the same as the params.page.code part in the site configuration. math: the same as the params.page.math part in the site configuration. mapbox: the same as the params.page.mapbox part in the site configuration. share: the same as the params.page.share part in the site configuration. comment: the same as the params.page.comment part in the site configuration. library: the same as the params.page.library part in the site configuration. seo: the same as the params.page.seo part in the site configuration. Tip featuredImage and featuredImagePreview support the complete usage of local resource references. If the page resource with name: featured-image or name: featured-image-preview is set in the front matter, it is not necessary to set the parameter featuredImage or featuredImagePreview: resources:- name:featured-imagesrc:featured-image.jpg- name:featured-image-previewsrc:featured-image-preview.jpg ","date":"2020-03-05","objectID":"/theme-documentation-content/:2:0","tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"3 Content Summaries LoveIt theme uses the summary of the content to display abstract information in the home page. Hugo can generate summaries of your content. Summary PreviewSummary Preview \" Summary Preview ","date":"2020-03-05","objectID":"/theme-documentation-content/:3:0","tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"Automatic Summary Splitting By default, Hugo automatically takes the first 70 words of your content as its summary. You may customize the summary length by setting summaryLength in the site configuration. If you are creating content in a CJKChinese/Japanese/Korean language and want to use Hugo’s automatic summary splitting, set hasCJKLanguage to true in your site configuration. ","date":"2020-03-05","objectID":"/theme-documentation-content/:3:1","tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"Manual Summary Splitting Alternatively, you may add the \u003c!--more--\u003e summary divider where you want to split the article. Content that comes before the summary divider will be used as that content’s summary. Note Be careful to enter \u003c!--more--\u003e exactly; i.e., all lowercase and with no whitespace. ","date":"2020-03-05","objectID":"/theme-documentation-content/:3:2","tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"Front Matter Summary You might want your summary to be something other than the text that starts the article. In this case you can provide a separate summary in the summary variable of the article front matter. ","date":"2020-03-05","objectID":"/theme-documentation-content/:3:3","tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"Use Description as Summary You might want your description in the description variable of the article front matter as the summary. You may add the \u003c!--more--\u003e summary divider at the start of the article. Keep content that comes before the summary divider empty. Then LoveIt theme will use your description as the summary. ","date":"2020-03-05","objectID":"/theme-documentation-content/:3:4","tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"Priority Order of Summary Selection Because there are multiple ways in which a summary can be specified it is useful to understand the order. It is as follows: If there is a \u003c!--more--\u003e summary divider present in the article but no content is before the divider, the description will be used as the summary. If there is a \u003c!--more--\u003e summary divider present in the article the text up to the divider will be provided as per the manual summary split method. If there is a summary variable in the article front matter the value of the variable will be provided as per the front matter summary method. The text at the start of the article will be provided as per the automatic summary split method. Note It is not recommended to include rich text block elements in the summary, which will cause typographic errors. Such as code blocks, pictures, tables, etc. ","date":"2020-03-05","objectID":"/theme-documentation-content/:3:5","tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"4 Basic Markdown Syntax This part is shown in the basic markdown syntax page. ","date":"2020-03-05","objectID":"/theme-documentation-content/:4:0","tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"5 Extended Markdown Syntax LoveIt theme has some extended syntax elements for you to write articles. ","date":"2020-03-05","objectID":"/theme-documentation-content/:5:0","tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"Emoji Support This part is shown in the emoji support page. ","date":"2020-03-05","objectID":"/theme-documentation-content/:5:1","tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"Mathematical Formula LoveIt theme supports mathematical formulas based on $ \\KaTeX $. Set the property enable = true under [params.math] in your site configuration and the property math: true of the article front matter to enable the automatic rendering of mathematical formulas. Tip Here is a list of $ \\TeX $ functions supported by $ \\KaTeX $. Block Formula The default block delimiters are $$/$$ and \\\\[/\\\\]: $$ c = \\pm\\sqrt{a^2 + b^2} $$ \\\\[ f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\\\] The rendered output looks like this: $$ c = \\pm\\sqrt{a^2 + b^2} $$ \\[ f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\] Inline Formula The default inline delimiters are $/$ and \\\\(/\\\\): $ c = \\pm\\sqrt{a^2 + b^2} $ and \\\\( f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\\\) The rendered output looks like this: $ c = \\pm\\sqrt{a^2 + b^2} $ and \\( f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\) Tip You can add more block and inline delimiters in your site configuration. Copy-tex Copy-tex is an extension for $ \\KaTeX $. By the extension, when selecting and copying $ \\KaTeX $ rendered elements, copies their $ \\LaTeX $ source to the clipboard. Set the property copyTex = true under [params.math] in your site configuration to enable Copy-tex. Select and copy the formula rendered in the previous section, and you can find that the copied content is the LaTeX source code. mhchem mhchem is an extension for $ \\KaTeX $. By the extension, you can write beautiful chemical equations easily in the article. Set the property mhchem = true under [params.math] in your site configuration to enable mhchem. $$ \\ce{CO2 + C -\u003e 2 CO} $$ $$ \\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-} $$ The rendered output looks like this: $$ \\ce{CO2 + C -\u003e 2 CO} $$ $$ \\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-} $$ ","date":"2020-03-05","objectID":"/theme-documentation-content/:5:2","tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"Ruby Annotation An extended Markdown syntax for ruby annotation is supported in LoveIt theme: [Hugo]^(An open-source static site generator) The rendered output looks like this: HugoAn open-source static site generator ","date":"2020-03-05","objectID":"/theme-documentation-content/:5:3","tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"Fraction An extended Markdown syntax for fraction is supported in LoveIt theme: [Light]/[Dark] [99]/[100] The rendered output looks like this: Light/Dark 90/100 ","date":"2020-03-05","objectID":"/theme-documentation-content/:5:4","tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"Font Awesome LoveIt theme uses Font Awesome as the icon library. You can easily use these icons in your articles. Get the class of icons you wanted from the Font Awesome website. Gone camping! :(fas fa-campground fa-fw): Be back soon. That is so funny! :(far fa-grin-tears): The rendered output looks like this: Gone camping!  Be back soon. That is so funny! ","date":"2020-03-05","objectID":"/theme-documentation-content/:5:5","tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"Escape character In some special cases (when writing this theme documentation ), your content will conflict with basic or extended Markdown syntax, and it is inevitable. The escape character syntax can help you build the content you wanted: {?X} -\u003e X For example, two : will enable emoji syntax, which is not the behavior you want. The escape character syntax is like this: {?:}joy: The rendered output looks like this: :joy: instead of :joy: Tip This is related to an issue for Hugo, which has not been resolved. Another example is: [link{?]}(#escape-character) The rendered output looks like this: [link](#escape-character) instead of link. ","date":"2020-03-05","objectID":"/theme-documentation-content/:5:6","tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"Hugo provides multiple built-in shortcodes for author convenience and to keep your markdown content clean.","date":"2020-03-04","objectID":"/theme-documentation-built-in-shortcodes/","tags":["shortcodes"],"title":"Theme Documentation - Built-in Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"Hugo provides multiple built-in shortcodes for author convenience and to keep your markdown content clean. Hugo uses Markdown for its simple content format. However, there are a lot of things that Markdown doesn’t support well. You could use pure HTML to expand possibilities. But this happens to be a bad idea. Everyone uses Markdown because it’s pure and simple to read even non-rendered. You should avoid HTML to keep it as simple as possible. To avoid this limitations, Hugo created shortcodes. A shortcode is a simple snippet that can generate reasonable HTML code and conforms to Markdown’s design philosophy. Hugo ships with a set of predefined shortcodes that represent very common usage. These shortcodes are provided for author convenience and to keep your markdown content clean. ","date":"2020-03-04","objectID":"/theme-documentation-built-in-shortcodes/:0:0","tags":["shortcodes"],"title":"Theme Documentation - Built-in Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"1 figure Documentation of figure Example figure input: {{\u003c figure src=\"/images/lighthouse.jpg\" title=\"Lighthouse (figure)\" \u003e}} The rendered output looks like this: Lighthouse (figure) The HTML looks like this: \u003cfigure\u003e \u003cimg src=\"/images/lighthouse.jpg\"/\u003e \u003cfigcaption\u003e \u003ch4\u003eLighthouse (figure)\u003c/h4\u003e \u003c/figcaption\u003e \u003c/figure\u003e ","date":"2020-03-04","objectID":"/theme-documentation-built-in-shortcodes/:1:0","tags":["shortcodes"],"title":"Theme Documentation - Built-in Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"2 gist Documentation of gist Example gist input: {{\u003c gist spf13 7896402 \u003e}} The rendered output looks like this: The HTML looks like this: \u003cscript type=\"application/javascript\" src=\"https://gist.github.com/spf13/7896402.js\"\u003e\u003c/script\u003e ","date":"2020-03-04","objectID":"/theme-documentation-built-in-shortcodes/:2:0","tags":["shortcodes"],"title":"Theme Documentation - Built-in Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"3 highlight Documentation of highlight Example highlight input: {{\u003c highlight html \u003e}} \u003csection id=\"main\"\u003e \u003cdiv\u003e \u003ch1 id=\"title\"\u003e{{ .Title }}\u003c/h1\u003e {{ range .Pages }} {{ .Render \"summary\"}} {{ end }} \u003c/div\u003e \u003c/section\u003e {{\u003c /highlight \u003e}} The rendered output looks like this: \u003csection id=\"main\"\u003e \u003cdiv\u003e \u003ch1 id=\"title\"\u003e{{ .Title }}\u003c/h1\u003e {{ range .Pages }} {{ .Render \"summary\"}} {{ end }} \u003c/div\u003e \u003c/section\u003e ","date":"2020-03-04","objectID":"/theme-documentation-built-in-shortcodes/:3:0","tags":["shortcodes"],"title":"Theme Documentation - Built-in Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"4 instagram Documentation of instagram Example instagram input: {{\u003c instagram BWNjjyYFxVx hidecaption \u003e}} The rendered output looks like this: ","date":"2020-03-04","objectID":"/theme-documentation-built-in-shortcodes/:4:0","tags":["shortcodes"],"title":"Theme Documentation - Built-in Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"5 param Documentation of param Example param input: {{\u003c param description \u003e}} The rendered output looks like this: Hugo provides multiple built-in shortcodes for author convenience and to keep your markdown content clean. ","date":"2020-03-04","objectID":"/theme-documentation-built-in-shortcodes/:5:0","tags":["shortcodes"],"title":"Theme Documentation - Built-in Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"6 ref and relref Documentation of ref and relref ","date":"2020-03-04","objectID":"/theme-documentation-built-in-shortcodes/:6:0","tags":["shortcodes"],"title":"Theme Documentation - Built-in Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"7 tweet Documentation of tweet Example tweet input: {{\u003c tweet 877500564405444608 \u003e}} The rendered output looks like this: Hugo 0.24 Released: Big archetype update + @Netlify _redirects etc. file supporthttps://t.co/X94FmYDEZJ #gohugo #golang @spf13 @bepsays — GoHugo.io (@GoHugoIO) June 21, 2017 ","date":"2020-03-04","objectID":"/theme-documentation-built-in-shortcodes/:7:0","tags":["shortcodes"],"title":"Theme Documentation - Built-in Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"8 vimeo Documentation of vimeo Example vimeo input: {{\u003c vimeo 146022717 \u003e}} The rendered output looks like this: ","date":"2020-03-04","objectID":"/theme-documentation-built-in-shortcodes/:8:0","tags":["shortcodes"],"title":"Theme Documentation - Built-in Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"9 youtube Documentation of youtube Example youtube input: {{\u003c youtube w7Ft2ymGmfc \u003e}} The rendered output looks like this: ","date":"2020-03-04","objectID":"/theme-documentation-built-in-shortcodes/:9:0","tags":["shortcodes"],"title":"Theme Documentation - Built-in Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"LoveIt theme provides multiple shortcodes on top of built-in ones in Hugo.","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"LoveIt theme provides multiple shortcodes on top of built-in ones in Hugo. ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:0:0","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"1 style Note Hugo extended version is necessary for style shortcode. style is a shortcode to insert custom style in your post. The style shortcode has two positional parameters. The first one is the custom style content, which supports nesting syntax in  SASS and \u0026 referring to this parent HTML element. And the second one is the tag name of the HTML element wrapping the content you want to change style, and whose default value is div. Example style input: {{\u003c style \"text-align:right; strong{color:#00b1ff;}\" \u003e}} This is a **right-aligned** paragraph. {{\u003c /style \u003e}} The rendered output looks like this: This is a right-aligned paragraph. ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:1:0","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"2 link link shortcode is an alternative to Markdown link syntax. link shortcode can provide some other features and can be used in code blocks. The complete usage of local resource references is supported. The link shortcode has the following named parameters: href [required] (first positional parameter) Destination of the link. content [optional] (second positional parameter) Content of the link, default value is the value of href parameter. Markdown or HTML format is supported. title [optional] (third positional parameter) title attribute of the HTML a tag, which will be shown when hovering on the link. class [optional] class attribute of the HTML a tag. rel [optional] Additional rel attributes of the HTML a tag. Example link input: {{\u003c link \"https://assemble.io\" \u003e}} Or {{\u003c link href=\"https://assemble.io\" \u003e}} {{\u003c link \"mailto:contact@revolunet.com\" \u003e}} Or {{\u003c link href=\"mailto:contact@revolunet.com\" \u003e}} {{\u003c link \"https://assemble.io\" Assemble \u003e}} Or {{\u003c link href=\"https://assemble.io\" content=Assemble \u003e}} The rendered output looks like this: https://assemble.io mailto:contact@revolunet.com Assemble Example link input with a title: {{\u003c link \"https://github.com/upstage/\" Upstage \"Visit Upstage!\" \u003e}} Or {{\u003c link href=\"https://github.com/upstage/\" content=Upstage title=\"Visit Upstage!\" \u003e}} The rendered output looks like this (hover over the link, there should be a tooltip): Upstage ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:2:0","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"3 image image shortcode is an alternative to figure shortcode. image shortcode can take full advantage of the dependent libraries of lazysizes and lightgallery.js. The complete usage of local resource references is supported. The image shortcode has the following named parameters: src [required] (first positional parameter) URL of the image to be displayed. alt [optional] (second positional parameter) Alternate text for the image if the image cannot be displayed, default value is the value of src parameter. Markdown or HTML format is supported. caption [optional] (third positional parameter) Image caption. Markdown or HTML format is supported. title [optional] Image title that will be shown when hovering on the image. class [optional] class attribute of the HTML figure tag. src_s [optional] URL of the image thumbnail, used for lightgallery, default value is the value of src parameter. src_l [optional] URL of the HD image, used for lightgallery, default value is the value of src parameter. height [optional] height attribute of the image. width [optional] width attribute of the image. linked [optional] Whether the image needs to be hyperlinked, default value is true. rel [optional] Additional rel attributes of the HTML a tag, if linked parameter is set to true. Example image input: {{\u003c image src=\"/images/lighthouse.jpg\" caption=\"Lighthouse (`image`)\" src_s=\"/images/lighthouse-small.jpg\" src_l=\"/images/lighthouse-large.jpg\" \u003e}} The rendered output looks like this: Lighthouse (image)\" Lighthouse (image) ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:3:0","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"4 admonition The admonition shortcode supports 12 types of banners to help you put notice in your page. Markdown or HTML format in the content is supported. Note A note banner Abstract An abstract banner Info A info banner Tip A tip banner Success A success banner Question A question banner Warning A warning banner Failure A failure banner Danger A danger banner Bug A bug banner Example An example banner Quote A quote banner The admonition shortcode has the following named parameters: type [optional] (first positional parameter) Type of the admonition banner, default value is note. title [optional] (second positional parameter) Title of the admonition banner, default value is the value of type parameter. open [optional] (third positional parameter) Whether the content will be expandable by default, default value is true. Example admonition input: {{\u003c admonition type=tip title=\"This is a tip\" open=false \u003e}} A **tip** banner {{\u003c /admonition \u003e}} Or {{\u003c admonition tip \"This is a tip\" false \u003e}} A **tip** banner {{\u003c /admonition \u003e}} The rendered output looks like this: This is a tip A tip banner ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:4:0","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"5 mermaid mermaid is a library helping you to generate diagram and flowcharts from text, in a similar manner as Markdown. Just insert your mermaid code in the mermaid shortcode and that’s it. ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:5:0","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"5.1 Flowchart Example flowchart mermaid input: {{\u003c mermaid \u003e}} graph LR; A[Hard edge] --\u003e|Link text| B(Round edge) B --\u003e C{Decision} C --\u003e|One| D[Result one] C --\u003e|Two| E[Result two] {{\u003c /mermaid \u003e}} The rendered output looks like this: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:5:1","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"5.2 Sequence Diagram Example sequence diagram mermaid input: {{\u003c mermaid \u003e}} sequenceDiagram participant Alice participant Bob Alice-\u003e\u003eJohn: Hello John, how are you? loop Healthcheck John-\u003eJohn: Fight against hypochondria end Note right of John: Rational thoughts \u003cbr/\u003eprevail... John--\u003eAlice: Great! John-\u003eBob: How about you? Bob--\u003eJohn: Jolly good! {{\u003c /mermaid \u003e}} The rendered output looks like this: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:5:2","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"5.3 GANTT Example GANTT mermaid input: {{\u003c mermaid \u003e}} gantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to mermaid :1d {{\u003c /mermaid \u003e}} The rendered output looks like this: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:5:3","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"5.4 Class Diagram Example class diagram mermaid input: {{\u003c mermaid \u003e}} classDiagram Class01 \u003c|-- AveryLongClass : Cool Class03 *-- Class04 Class05 o-- Class06 Class07 .. Class08 Class09 --\u003e C2 : Where am i? Class09 --* C3 Class09 --|\u003e Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla Class08 \u003c--\u003e C2: Cool label {{\u003c /mermaid \u003e}} The rendered output looks like this: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:5:4","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"5.5 State Diagram Example state diagram mermaid input: {{\u003c mermaid \u003e}} stateDiagram [*] --\u003e Still Still --\u003e [*] Still --\u003e Moving Moving --\u003e Still Moving --\u003e Crash Crash --\u003e [*] {{\u003c /mermaid \u003e}} The rendered output looks like this: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:5:5","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"5.6 Git Graph Example git graph mermaid input: {{\u003c mermaid \u003e}} gitGraph: options { \"nodeSpacing\": 100, \"nodeRadius\": 10 } end commit branch newbranch checkout newbranch commit commit checkout master commit commit merge newbranch {{\u003c /mermaid \u003e}} The rendered output looks like this: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:5:6","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"5.7 Pie Example pie mermaid input: {{\u003c mermaid \u003e}} pie \"Dogs\" : 386 \"Cats\" : 85 \"Rats\" : 15 {{\u003c /mermaid \u003e}} The rendered output looks like this: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:5:7","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"6 echarts ECharts is a library helping you to generate interactive data visualization. The basic chart types ECharts supports include line series, bar series, scatter series, pie charts, candle-stick series, boxplot series for statistics, map series, heatmap series, lines series for directional information, graph series for relationships, treemap series, sunburst series, parallel series for multi-dimensional data, funnel series, gauge series. And it’s extremely easy to create a combinition of them with ECharts. Just insert your ECharts option in JSON/YAML/TOML format in the echarts shortcode and that’s it. Example echarts input in JSON format: {{\u003c echarts \u003e}} { \"title\": { \"text\": \"Summary Line Chart\", \"top\": \"2%\", \"left\": \"center\" }, \"tooltip\": { \"trigger\": \"axis\" }, \"legend\": { \"data\": [\"Email Marketing\", \"Affiliate Advertising\", \"Video Advertising\", \"Direct View\", \"Search Engine\"], \"top\": \"10%\" }, \"grid\": { \"left\": \"5%\", \"right\": \"5%\", \"bottom\": \"5%\", \"top\": \"20%\", \"containLabel\": true }, \"toolbox\": { \"feature\": { \"saveAsImage\": { \"title\": \"Save as Image\" } } }, \"xAxis\": { \"type\": \"category\", \"boundaryGap\": false, \"data\": [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"] }, \"yAxis\": { \"type\": \"value\" }, \"series\": [ { \"name\": \"Email Marketing\", \"type\": \"line\", \"stack\": \"Total\", \"data\": [120, 132, 101, 134, 90, 230, 210] }, { \"name\": \"Affiliate Advertising\", \"type\": \"line\", \"stack\": \"Total\", \"data\": [220, 182, 191, 234, 290, 330, 310] }, { \"name\": \"Video Advertising\", \"type\": \"line\", \"stack\": \"Total\", \"data\": [150, 232, 201, 154, 190, 330, 410] }, { \"name\": \"Direct View\", \"type\": \"line\", \"stack\": \"Total\", \"data\": [320, 332, 301, 334, 390, 330, 320] }, { \"name\": \"Search Engine\", \"type\": \"line\", \"stack\": \"Total\", \"data\": [820, 932, 901, 934, 1290, 1330, 1320] } ] } {{\u003c /echarts \u003e}} The same in YAML format: {{\u003c echarts \u003e}}title:text:Summary Line Charttop:2%left:centertooltip:trigger:axislegend:data:- Email Marketing- Affiliate Advertising- Video Advertising- Direct View- Search Enginetop:10%grid:left:5%right:5%bottom:5%top:20%containLabel:truetoolbox:feature:saveAsImage:title:Save as ImagexAxis:type:categoryboundaryGap:falsedata:- Monday- Tuesday- Wednesday- Thursday- Friday- Saturday- SundayyAxis:type:valueseries:- name:Email Marketingtype:linestack:Totaldata:- 120- 132- 101- 134- 90- 230- 210- name:Affiliate Advertisingtype:linestack:Totaldata:- 220- 182- 191- 234- 290- 330- 310- name:Video Advertisingtype:linestack:Totaldata:- 150- 232- 201- 154- 190- 330- 410- name:Direct Viewtype:linestack:Totaldata:- 320- 332- 301- 334- 390- 330- 320- name:Search Enginetype:linestack:Totaldata:- 820- 932- 901- 934- 1290- 1330- 1320{{\u003c /echarts \u003e}} The same in TOML format: {{\u003c echarts \u003e}} [title] text = \"Summary Line Chart\" top = \"2%\" left = \"center\" [tooltip] trigger = \"axis\" [legend] data = [ \"Email Marketing\", \"Affiliate Advertising\", \"Video Advertising\", \"Direct View\", \"Search Engine\" ] top = \"10%\" [grid] left = \"5%\" right = \"5%\" bottom = \"5%\" top = \"20%\" containLabel = true [toolbox] [toolbox.feature] [toolbox.feature.saveAsImage] title = \"Save as Image\" [xAxis] type = \"category\" boundaryGap = false data = [ \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\" ] [yAxis] type = \"value\" [[series]] name = \"Email Marketing\" type = \"line\" stack = \"Total\" data = [ 120.0, 132.0, 101.0, 134.0, 90.0, 230.0, 210.0 ] [[series]] name = \"Affiliate Advertising\" type = \"line\" stack = \"Total\" data = [ 220.0, 182.0, 191.0, 234.0, 290.0, 330.0, 310.0 ] [[series]] name = \"Video Advertising\" type = \"line\" stack = \"Total\" data = [ 150.0, 232.0, 201.0, 154.0, 190.0, 330.0, 410.0 ] [[series]] name = \"Direct View\" type = \"line\" stack = \"Total\" data = [ 320.0, 332.0, 301.0, 334.0, 390.0, 330.0, 320.0 ] [[series]] name = \"Search Engine\" type = \"line\" stack = \"Total\" data = [ 820.0, 932.0, 901.0, 934.0, 1290.0, 1330.0, 1320.0 ] {{\u003c /echarts \u003e}} The rendered output looks like this: The echarts shortcode has also","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:6:0","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"7 mapbox Mapbox GL JS is a JavaScript library that uses WebGL to render interactive maps from vector tiles and Mapbox styles. The mapbox shortcode has the following named parameters to use Mapbox GL JS: lng [required] (first positional parameter) Longitude of the inital centerpoint of the map, measured in degrees. lat [required] (second positional parameter) Latitude of the inital centerpoint of the map, measured in degrees. zoom [optional] (third positional parameter) The initial zoom level of the map, default value is 10. marked [optional] (fourth positional parameter) Whether to add a marker at the inital centerpoint of the map, default value is true. light-style [optional] (fifth positional parameter) Style for the light theme, default value is the value set in the front matter or the site configuration. dark-style [optional] (sixth positional parameter) Style for the dark theme, default value is the value set in the front matter or the site configuration. navigation [optional] Whether to add NavigationControl, default value is the value set in the front matter or the site configuration. geolocate [optional] Whether to add GeolocateControl, default value is the value set in the front matter or the site configuration. scale [optional] Whether to add ScaleControl, default value is the value set in the front matter or the site configuration. fullscreen [optional] Whether to add FullscreenControl, default value is the value set in the front matter or the site configuration. width [optional] Width of the map, default value is 100%. height [optional] Height of the map, default value is 20rem. Example simple mapbox input: {{\u003c mapbox 121.485 31.233 12 \u003e}} Or {{\u003c mapbox lng=121.485 lat=31.233 zoom=12 \u003e}} The rendered output looks like this: Example mapbox input with the custom style: {{\u003c mapbox -122.252 37.453 10 false \"mapbox://styles/mapbox/navigation-preview-day-v4\" \"mapbox://styles/mapbox/navigation-preview-night-v4\" \u003e}} Or {{\u003c mapbox lng=-122.252 lat=37.453 zoom=10 marked=false light-style=\"mapbox://styles/mapbox/navigation-preview-day-v4\" dark-style=\"mapbox://styles/mapbox/navigation-preview-night-v4\" \u003e}} The rendered output looks like this: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:7:0","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"8 music The music shortcode embeds a responsive music player based on APlayer and MetingJS. There are three ways to use it the music shortcode. ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:8:0","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"8.1 Custom Music URL The complete usage of local resource references is supported. The music shortcode has the following named parameters by custom music URL: server [required] URL of the custom music. name [optional] Name of the custom music. artist [optional] Artist of the custom music. cover [required] URL of the custom music cover. Example music input by custom music URL: {{\u003c music url=\"/music/Wavelength.mp3\" name=Wavelength artist=oldmanyoung cover=\"/images/Wavelength.jpg\" \u003e}} The rendered output looks like this: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:8:1","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"8.2 Music Platform URL Automatic Identification The music shortcode has one named parameter by music platform URL automatic identification: auto [required] (first positional parameter) URL of the music platform URL for automatic identification, which supports netease, tencent and xiami music platform. Example music input by music platform URL automatic identification: {{\u003c music auto=\"https://music.163.com/#/playlist?id=60198\" \u003e}} Or {{\u003c music \"https://music.163.com/#/playlist?id=60198\" \u003e}} The rendered output looks like this: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:8:2","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"8.3 Custom Server, Type and ID The music shortcode has the following named parameters by custom music platform: server [required] (first positional parameter) [netease, tencent, kugou, xiami, baidu] Music platform. type [required] (second positional parameter) [song, playlist, album, search, artist] Type of the music. id [required] (third positional parameter) Song ID, or playlist ID, or album ID, or search keyword, or artist ID. Example music input by custom music platform: {{\u003c music server=\"netease\" type=\"song\" id=\"1868553\" \u003e}} Or {{\u003c music netease song 1868553 \u003e}} The rendered output looks like this: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:8:3","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"8.4 Other Parameters The music shortcode has other named parameters applying to the above three ways: theme [optional] Main color of the music player, default value is #448aff. fixed [optional] Whether to enable fixed mode, default value is false. mini [optional] Whether to enable mini mode, default value is false. autoplay [optional] Whether to autoplay music, default value is false. volume [optional] Default volume when the player is first opened, which will be remembered in the browser, default value is 0.7. mutex [optional] Whether to pause other players when this player starts playing, default value is true. The music shortcode has the following named parameters only applying to the type of music list: loop [optional] [all, one, none] Loop mode of the music list, default value is none. order [optional] [list, random] Play order of the music list, default value is list. list-folded [optional] Whether the music list should be folded at first, default value is false. list-max-height [optional] Max height of the music list, default value is 340px. ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:8:4","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"9 bilibili The bilibili shortcode embeds a responsive video player for bilibili videos. When the video only has one part, only the BV id of the video is required, e.g.: https://www.bilibili.com/video/BV1Sx411T7QQ Example bilibili input: {{\u003c bilibili BV1Sx411T7QQ \u003e}} Or {{\u003c bilibili id=BV1Sx411T7QQ \u003e}} The rendered output looks like this: When the video has multiple parts, in addition to the BV id of the video, p is also required, whose default value is 1, e.g.: https://www.bilibili.com/video/BV1TJ411C7An?p=3 Example bilibili input with p: {{\u003c bilibili BV1TJ411C7An 3 \u003e}} Or {{\u003c bilibili id=BV1TJ411C7An p=3 \u003e}} The rendered output looks like this: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:9:0","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"10 typeit The typeit shortcode provides typing animation based on TypeIt. Just insert your content in the typeit shortcode and that’s it. ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:10:0","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"10.1 Simple Content Simple content is allowed in Markdown format and without rich block content such as images and more… Example typeit input: {{\u003c typeit \u003e}} This is a *paragraph* with **typing animation** based on [TypeIt](https://typeitjs.com/)... {{\u003c /typeit \u003e}} The rendered output looks like this: Alternatively, you can use custom HTML tags. Example typeit input with h4 tag: {{\u003c typeit tag=h4 \u003e}} This is a *paragraph* with **typing animation** based on [TypeIt](https://typeitjs.com/)... {{\u003c /typeit \u003e}} The rendered output looks like this: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:10:1","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"10.2 Code Content Code content is allowed and will be highlighted by named parameter code for the type of code language. Example typeit input with code: {{\u003c typeit code=java \u003e}} public class HelloWorld { public static void main(String []args) { System.out.println(\"Hello World\"); } } {{\u003c /typeit \u003e}} The rendered output looks like this: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:10:2","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"10.3 Group Content All typing animations start at the same time by default. But sometimes you may want to start a set of typeit contents in order. A set of typeit contents with the same value of named parameter group will start typing animation in sequence. Example typeit input with group: {{\u003c typeit group=paragraph \u003e}} **First** this paragraph begins {{\u003c /typeit \u003e}} {{\u003c typeit group=paragraph \u003e}} **Then** this paragraph begins {{\u003c /typeit \u003e}} The rendered output looks like this: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:10:3","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"11 script script is a shortcode to insert custom  Javascript in your post. Note The script content can be guaranteed to be executed in order after all third-party libraries are loaded. So you are free to use third-party libraries. Example script input: {{\u003c script \u003e}} console.log('Hello LoveIt!'); {{\u003c /script \u003e}} You can see the output in the console of the developer tool. ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:11:0","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["Markdown"],"content":"This article shows the basic Markdown syntax and format.","date":"2019-12-01","objectID":"/basic-markdown-syntax/","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files. Note This article is a shameful copy of the great Grav original page. If you want to know about the extented Markdown syntax of LoveIt theme, please read extended Markdown syntax page. Let’s face it: Writing content for the Web is tiresome. WYSIWYG editors help alleviate this task, but they generally result in horrible code, or worse yet, ugly web pages. Markdown is a better way to write HTML, without all the complexities and ugliness that usually accompanies it. Some of the key benefits are: Markdown is simple to learn, with minimal extra characters, so it’s also quicker to write content. Less chance of errors when writing in Markdown. Produces valid XHTML output. Keeps the content and the visual display separate, so you cannot mess up the look of your site. Write in any text editor or Markdown application you like. Markdown is a joy to use! John Gruber, the author of Markdown, puts it like this: The overriding design goal for Markdown’s formatting syntax is to make it as readable as possible. The idea is that a Markdown-formatted document should be publishable as-is, as plain text, without looking like it’s been marked up with tags or formatting instructions. While Markdown’s syntax has been influenced by several existing text-to-HTML filters, the single biggest source of inspiration for Markdown’s syntax is the format of plain text email. – John Gruber Without further delay, let us go over the main elements of Markdown and what the resulting HTML looks like! Tip  Bookmark this page for easy future reference! ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:0:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"1 Headings Headings from h2 through h6 are constructed with a # for each level: ## h2 Heading ### h3 Heading #### h4 Heading ##### h5 Heading ###### h6 Heading The HTML looks like this: \u003ch2\u003eh2 Heading\u003c/h2\u003e \u003ch3\u003eh3 Heading\u003c/h3\u003e \u003ch4\u003eh4 Heading\u003c/h4\u003e \u003ch5\u003eh5 Heading\u003c/h5\u003e \u003ch6\u003eh6 Heading\u003c/h6\u003e Heading IDs To add a custom heading ID, enclose the custom ID in curly braces on the same line as the heading: ### A Great Heading {#custom-id} The HTML looks like this: \u003ch3 id=\"custom-id\"\u003eA Great Heading\u003c/h3\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:1:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"2 Comments Comments should be HTML compatible. \u003c!-- This is a comment --\u003e Comment below should NOT be seen: ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:2:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"3 Horizontal Rules The HTML \u003chr\u003e element is for creating a “thematic break” between paragraph-level elements. In Markdown, you can create a \u003chr\u003e with any of the following: ___: three consecutive underscores ---: three consecutive dashes ***: three consecutive asterisks The rendered output looks like this: ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:3:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"4 Body Copy Body copy written as normal, plain text will be wrapped with \u003cp\u003e\u003c/p\u003e tags in the rendered HTML. So this body copy: Lorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad. The HTML looks like this: \u003cp\u003eLorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad.\u003c/p\u003e A line break can be done with one blank line. ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:4:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"5 Inline HTML If you need a certain HTML tag (with a class) you can simply use HTML: Paragraph in Markdown. \u003cdiv class=\"class\"\u003e This is \u003cb\u003eHTML\u003c/b\u003e \u003c/div\u003e Paragraph in Markdown. ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:5:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"6 Emphasis ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:6:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Bold For emphasizing a snippet of text with a heavier font-weight. The following snippet of text is rendered as bold text. **rendered as bold text** __rendered as bold text__ The HTML looks like this: \u003cstrong\u003erendered as bold text\u003c/strong\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:6:1","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Italics For emphasizing a snippet of text with italics. The following snippet of text is rendered as italicized text. *rendered as italicized text* _rendered as italicized text_ The HTML looks like this: \u003cem\u003erendered as italicized text\u003c/em\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:6:2","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Strikethrough In GFMGitHub flavored Markdown you can do strikethroughs. ~~Strike through this text.~~ The rendered output looks like this: Strike through this text. The HTML looks like this: \u003cdel\u003eStrike through this text.\u003c/del\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:6:3","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Combination Bold, italics, and strikethrough can be used in combination. ***bold and italics*** ~~**strikethrough and bold**~~ ~~*strikethrough and italics*~~ ~~***bold, italics and strikethrough***~~ The rendered output looks like this: bold and italics strikethrough and bold strikethrough and italics bold, italics and strikethrough The HTML looks like this: \u003cem\u003e\u003cstrong\u003ebold and italics\u003c/strong\u003e\u003c/em\u003e \u003cdel\u003e\u003cstrong\u003estrikethrough and bold\u003c/strong\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003estrikethrough and italics\u003c/em\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003e\u003cstrong\u003ebold, italics and strikethrough\u003c/strong\u003e\u003c/em\u003e\u003c/del\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:6:4","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"7 Blockquotes For quoting blocks of content from another source within your document. Add \u003e before any text you want to quote: \u003e **Fusion Drive** combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. The rendered output looks like this: Fusion Drive combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. The HTML looks like this: \u003cblockquote\u003e \u003cp\u003e \u003cstrong\u003eFusion Drive\u003c/strong\u003e combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. \u003c/p\u003e \u003c/blockquote\u003e Blockquotes can also be nested: \u003e Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. \u003e\u003e Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. The rendered output looks like this: Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:7:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"8 Lists ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:8:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Unordered A list of items in which the order of the items does not explicitly matter. You may use any of the following symbols to denote bullets for each list item: * valid bullet - valid bullet + valid bullet For example: * Lorem ipsum dolor sit amet * Consectetur adipiscing elit * Integer molestie lorem at massa * Facilisis in pretium nisl aliquet * Nulla volutpat aliquam velit * Phasellus iaculis neque * Purus sodales ultricies * Vestibulum laoreet porttitor sem * Ac tristique libero volutpat at * Faucibus porta lacus fringilla vel * Aenean sit amet erat nunc * Eget porttitor lorem The rendered output looks like this: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Phasellus iaculis neque Purus sodales ultricies Vestibulum laoreet porttitor sem Ac tristique libero volutpat at Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem The HTML looks like this: \u003cul\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit \u003cul\u003e \u003cli\u003ePhasellus iaculis neque\u003c/li\u003e \u003cli\u003ePurus sodales ultricies\u003c/li\u003e \u003cli\u003eVestibulum laoreet porttitor sem\u003c/li\u003e \u003cli\u003eAc tristique libero volutpat at\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ul\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:8:1","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Ordered A list of items in which the order of items does explicitly matter. 1. Lorem ipsum dolor sit amet 2. Consectetur adipiscing elit 3. Integer molestie lorem at massa 4. Facilisis in pretium nisl aliquet 5. Nulla volutpat aliquam velit 6. Faucibus porta lacus fringilla vel 7. Aenean sit amet erat nunc 8. Eget porttitor lorem The rendered output looks like this: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem The HTML looks like this: \u003col\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit\u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ol\u003e Tip If you just use 1. for each number, Markdown will automatically number each item. For example: 1. Lorem ipsum dolor sit amet 1. Consectetur adipiscing elit 1. Integer molestie lorem at massa 1. Facilisis in pretium nisl aliquet 1. Nulla volutpat aliquam velit 1. Faucibus porta lacus fringilla vel 1. Aenean sit amet erat nunc 1. Eget porttitor lorem The rendered output looks like this: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:8:2","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Task Lists Task lists allow you to create a list of items with checkboxes. To create a task list, add dashes (-) and brackets with a space ([ ]) before task list items. To select a checkbox, add an x in between the brackets ([x]). - [x] Write the press release - [ ] Update the website - [ ] Contact the media The rendered output looks like this: Write the press release Update the website Contact the media ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:8:3","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"9 Code ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:9:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Inline Code Wrap inline snippets of code with `. In this example, `\u003csection\u003e\u003c/section\u003e` should be wrapped as **code**. The rendered output looks like this: In this example, \u003csection\u003e\u003c/section\u003e should be wrapped as code. The HTML looks like this: \u003cp\u003e In this example, \u003ccode\u003e\u0026lt;section\u0026gt;\u0026lt;/section\u0026gt;\u003c/code\u003e should be wrapped with \u003cstrong\u003ecode\u003c/strong\u003e. \u003c/p\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:9:1","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Indented Code Or indent several lines of code by at least four spaces, as in: // Some comments line 1 of code line 2 of code line 3 of code The rendered output looks like this: // Some comments line 1 of code line 2 of code line 3 of code The HTML looks like this: \u003cpre\u003e \u003ccode\u003e // Some comments line 1 of code line 2 of code line 3 of code \u003c/code\u003e \u003c/pre\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:9:2","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Block Fenced Code Use “fences” ``` to block in multiple lines of code with a language attribute. ```markdown Sample text here... ``` The HTML looks like this: \u003cpre language-html\u003e \u003ccode\u003eSample text here...\u003c/code\u003e \u003c/pre\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:9:3","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Syntax Highlighting GFMGitHub Flavored Markdown also supports syntax highlighting. To activate it, simply add the file extension of the language you want to use directly after the first code “fence”, ```js, and syntax highlighting will automatically be applied in the rendered HTML. For example, to apply syntax highlighting to JavaScript code: ```js grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; ``` The rendered output looks like this: grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; Note Syntax highlighting page in Hugo Docs introduces more about syntax highlighting, including highlight shortcode. ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:9:4","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"10 Tables Tables are created by adding pipes as dividers between each cell, and by adding a line of dashes (also separated by bars) beneath the header. Note that the pipes do not need to be vertically aligned. | Option | Description | | ------ | ----------- | | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | The rendered output looks like this: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. The HTML looks like this: \u003ctable\u003e \u003cthead\u003e \u003ctr\u003e \u003cth\u003eOption\u003c/th\u003e \u003cth\u003eDescription\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e \u003ctbody\u003e \u003ctr\u003e \u003ctd\u003edata\u003c/td\u003e \u003ctd\u003epath to data files to supply the data that will be passed into templates.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eengine\u003c/td\u003e \u003ctd\u003eengine to be used for processing templates. Handlebars is the default.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eext\u003c/td\u003e \u003ctd\u003eextension to be used for dest files.\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e \u003c/table\u003e Right or center aligned text Adding a colon on the right side of the dashes below any heading will right align text for that column. Adding colons on both sides of the dashes below any heading will center align text for that column. | Option | Description | |:------:| -----------:| | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | The rendered output looks like this: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:10:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"11 Links ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:11:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Basic Link \u003chttps://assemble.io\u003e \u003ccontact@revolunet.com\u003e [Assemble](https://assemble.io) The rendered output looks like this (hover over the link, there is no tooltip): https://assemble.io contact@revolunet.com Assemble The HTML looks like this: \u003ca href=\"https://assemble.io\"\u003ehttps://assemble.io\u003c/a\u003e \u003ca href=\"mailto:contact@revolunet.com\"\u003econtact@revolunet.com\u003c/a\u003e \u003ca href=\"https://assemble.io\"\u003eAssemble\u003c/a\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:11:1","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Add a Title [Upstage](https://github.com/upstage/ \"Visit Upstage!\") The rendered output looks like this (hover over the link, there should be a tooltip): Upstage The HTML looks like this: \u003ca href=\"https://github.com/upstage/\" title=\"Visit Upstage!\"\u003eUpstage\u003c/a\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:11:2","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Named Anchors Named anchors enable you to jump to the specified anchor point on the same page. For example, each of these chapters: ## Table of Contents * [Chapter 1](#chapter-1) * [Chapter 2](#chapter-2) * [Chapter 3](#chapter-3) will jump to these sections: ## Chapter 1 \u003ca id=\"chapter-1\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 2 \u003ca id=\"chapter-2\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 3 \u003ca id=\"chapter-3\"\u003e\u003c/a\u003e Content for chapter one. Note The specific placement of the anchor tag seems to be arbitrary. They are placed inline here since it seems to be unobtrusive, and it works. ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:11:3","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"12 Footnotes Footnotes allow you to add notes and references without cluttering the body of the document. When you create a footnote, a superscript number with a link appears where you added the footnote reference. Readers can click the link to jump to the content of the footnote at the bottom of the page. To create a footnote reference, add a caret and an identifier inside brackets ([^1]). Identifiers can be numbers or words, but they can’t contain spaces or tabs. Identifiers only correlate the footnote reference with the footnote itself — in the output, footnotes are numbered sequentially. Add the footnote using another caret and number inside brackets with a colon and text ([^1]: My footnote.). You don’t have to put footnotes at the end of the document. You can put them anywhere except inside other elements like lists, block quotes, and tables. This is a digital footnote[^1]. This is a footnote with \"label\"[^label] [^1]: This is a digital footnote [^label]: This is a footnote with \"label\" This is a digital footnote1. This is a footnote with “label”2 ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:12:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"13 Images Images have a similar syntax to links but include a preceding exclamation point. ![Minion](https://octodex.github.com/images/minion.png) or: ![Alt text](https://octodex.github.com/images/stormtroopocat.jpg \"The Stormtroopocat\") The StormtroopocatAlt text \" The Stormtroopocat Like links, images also have a footnote style syntax: ![Alt text][id] The DojocatAlt text \" The Dojocat With a reference later in the document defining the URL location: [id]: https://octodex.github.com/images/dojocat.jpg \"The Dojocat\" Tip LoveIt theme has special shortcode for image, which provides more features. This is a digital footnote ↩︎ This is a footnote with “label” ↩︎ ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:13:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"This article shows the basic Markdown syntax and format.","date":"2019-12-01","objectID":"/crypto-bash-script/","tags":["Markdown","HTML"],"title":"Monitoring Cryptocurrencies with Bash","uri":"/crypto-bash-script/"},{"categories":["Markdown"],"content":"I bought into the crypto scene but was concerned about the price of crypto dropping dramatically as it does, so I made an incredibly basic bash script to monitor the prices of crypto using the CoinGecko API. This could be used for instance to show the current price on Bitcoin in PolyBar or DWM #!/bin/sh COINS=$1 CURRENCIES=$2 curl -X GET \"https://api.coingecko.com/api/v3/simple/price?ids=${COINS}\u0026vs_currencies=${CURRENCIES}\" -H \"accept: application/json\" echo \"\" Save this to a file fetch-crypto.sh and make it executable with chmod +x fetch-crypto.sh. Then we can call it as $ ./fetch-crypto.sh bitcoin aud {\"bitcoin\":{\"aud\":72630}} If you want more currencies or coins, you can use a comma separated list $ ./fetch-crypto.sh bitcoin,ethereum aud {\"bitcoin\":{\"aud\":72773},\"ethereum\":{\"aud\":2246.25}} $ ./fetch-crypto.sh bitcoin,ethereum aud,usd {\"ethereum\":{\"aud\":2246.25,\"usd\":1742.93},\"bitcoin\":{\"aud\":72773,\"usd\":56467}} Then if you want to actually extract data from the JSON, you could use the jq tool. For instance, if I wanted to make a script that printed out the price of Bitcoin in AUD, I would write $ fetch_crypto bitcoin aud | jq '.bitcoin.aud' 72773 I’ve also turned this into a rebinding and made it output the price in a notification $ notify-send \"$(./fetch-crypto.sh bitcoin aud | jq '.bitcoin.aud')\" ","date":"2019-12-01","objectID":"/crypto-bash-script/:0:0","tags":["Markdown","HTML"],"title":"Monitoring Cryptocurrencies with Bash","uri":"/crypto-bash-script/"},{"categories":["Markdown"],"content":"A Vim Purist's Workflow","date":"2019-10-01","objectID":"/vim-workflow/","tags":["emoji"],"title":"A Vim Purist's Workflow","uri":"/vim-workflow/"},{"categories":["Markdown"],"content":"I have been using Vim for about 1.5 years now and I am constantly surprised about how many features it has. Despite using it for many smaller projected, I wasn’t sold on using Vim as my main programming environment, and even then, it was only with CoC installed to essentially replicate VS Code in Vim. Until I stumbled across this video by Leeren at VimConf . This completely blew my mind (as did his other videos on Vim). Its amazing to me just how many features Vim has built in and that have been nearly forgotten. Nowhere before had I seen people talk about the compiler setting and include search. I knew Vim was good at managing tags, though I hadn’t even thought to learn it as I assumed that it would be default to setup, rather than the two steps it takes in reality. Since then I have ridiculously pruned my Vim configuration, noting that I am actually using Neovim rather than Vim; its the same thing but the codebase is more actively maintained and has a more positive direction for Vim. Fortunately for me, it makes many sane defaults that Vim doesn’t have which means my vimrc can be even shorter! Now note that I am claiming Vim is a great text editor akin to VS Code or Sublime Text, I am not claiming that it should be used in hardcode Java/C++/C# developement (of which I don’t have experience in). Most of my work is medium sized Python, Rust, C or Go. Which don’t need such environments (at least small C programs don’t). I like having a pure Vim configuration because I spend a lot of time in SSH or Docker containers and so having many key mappings gets annoying very quickly. Probably one of the biggest things you should do is use the Vim manual, type :h \u003csomething\u003e and press tab to show a list of all help pages that match the string provided. Once inside a help page, you can press gO to get an overview of the page, and Ctrl-[ over a keywork (one that is highlighted) to jump to its definition in the help pages Here are the non-programming related set hidden inoremap jk \u003cESC\u003e autocmd Filetype markdown,tex,mail setlocal spell spelllang=en_au The first is the dumbest setting that I have not seen a single Vim purist not put in their config. The second is the only keymapping that I can’t seem to shake off The last just turns on spelling when in markdown, latex, and mail Now I don’t use any plugins at the moment but there are many plugins that I would use if I were in something like web development like vim-surround ","date":"2019-10-01","objectID":"/vim-workflow/:0:0","tags":["emoji"],"title":"A Vim Purist's Workflow","uri":"/vim-workflow/"},{"categories":["Markdown"],"content":"vim-commentary Anyway, here are some replacements for common plugins that I use vnoremap gc :norm! i\u003cC-R\u003e=substitute(\u0026commentstring, '%s.*', '', '')\u003cCR\u003e\u003cCR\u003evnoremap gC :norm! \u003cC-R\u003e=len(substitute(\u0026commentstring, '%s.*', '', ''))\u003cCR\u003ex\u003cCR\u003e This is a crude implementation of commenting similar to Tim Pope’s vim-commentary. Just select the text you wish to comment in visual mode, and press gc to add the comment, or gC to delete a comment in the first column. This works with most filetypes however some (like Rust) it doesn’t choose the correct commenting character. For that I suggest you put this in a ftplugin vnoremap gc :norm! i#\u003cCR\u003evnoremap gC :norm! x if you wanted to comment a # sign. Note that you need to write the same number of x’s as the cha TODO ","date":"2019-10-01","objectID":"/vim-workflow/:1:0","tags":["emoji"],"title":"A Vim Purist's Workflow","uri":"/vim-workflow/"},{"categories":["Markdown"],"content":"Ultisnips Ultisnips is great, and is especially useful for things like web developement when you have templates where you want to edit multiple fields in the template at once or give default values. However, I don’t need to do that, I just need to get a snippet and be able jump arround to edit each of the columns inoremap ;s \u003cESC\u003e:-1r ~/.config/nvim/snippets/\u003cC-R\u003e=\u0026ft\u003cCR\u003e/inoremap ;; \u003cESC\u003e:call search('{%[^%]*%}', 'zW')\u003ccr\u003ec% TODO mention reddit post Then put snippets in the ~/.config/nvim/snippets/ directory assorted by file type. Then when you press ;s it will partially complete a filepath for you. Type the snippet that you want or press tab to make Vim show a menu of all possible options. Once it is inserted, navigate to the beginning of the snippet and press ;; to jump to the next item. TODO should make it so that you don’t need to navigate back yourself TODO the thoughtbot video I think does this partially? ","date":"2019-10-01","objectID":"/vim-workflow/:2:0","tags":["emoji"],"title":"A Vim Purist's Workflow","uri":"/vim-workflow/"},{"categories":["Markdown"],"content":"Background Make I think this was taken from Drew DeVault? command! -nargs=* BgMake \\ silent execute \":!(make \" . \"\u003cargs\u003e\" . \" \u003e /tmp/make.output 2\u003e\u00261;\" \\ \"notify-send 'make finished' 'make \u003cargs\u003e finished') \u0026\" | \\ redraw! | \\ cfile /tmp/make.output | copen ","date":"2019-10-01","objectID":"/vim-workflow/:3:0","tags":["emoji"],"title":"A Vim Purist's Workflow","uri":"/vim-workflow/"},{"categories":["Markdown"],"content":"Basic Goto-Definition In basic python projects, we might want to find some stuff so just use the include search functionality. ","date":"2019-10-01","objectID":"/vim-workflow/:4:0","tags":["emoji"],"title":"A Vim Purist's Workflow","uri":"/vim-workflow/"},{"categories":["Markdown"],"content":"VS Code like definitions Just use a tags file. All you need to is install ctags then use tags. If you want intellisense, just use the preview window for tags ","date":"2019-10-01","objectID":"/vim-workflow/:5:0","tags":["emoji"],"title":"A Vim Purist's Workflow","uri":"/vim-workflow/"},{"categories":["Markdown"],"content":"Vimtex Vimtex is seriously great, but I found that I was only using two of its (many) features: Compiling and error navigation Concealing The first I replaced by just using a make file and using the Vim make command and telling it what compiler to user Concealing was important to me at the time since I was doing a Honour in Mathematics, and as you can image, Vim simplifies it sooo much, but I just copied the concealing that vimtex does out of its source code and put the ones I needed into put this into my ftplugin/tex.vim file syn match texMathSymbol '\\\\C' contained conceal cchar=ℂsyn match texMathSymbol '\\\\F' contained conceal cchar=𝔽syn match texMathSymbol '\\\\N' contained conceal cchar=ℕsyn match texMathSymbol '\\\\Q' contained conceal cchar=ℚsyn match texMathSymbol '\\\\R' contained conceal cchar=ℝsyn match texMathSymbol '\\\\Z' contained conceal cchar=ℤ In fact this was an improvement since I got so simplify vimtex’s mathbb{C} to just \\C. Also, Vim has its own latex syntax highlighting which doesn’t do some environment by default, but you can add them yourself. For instance, to add the align environment you can add this to your ftplugin/tex.vim call TexNewMathZone(\"MyAlignGroup\",\"align\",1) Again, I highly reccoment reading Vim’s builtin tex.vim file in the $VIMRUNTIME which already does a lot for you! ","date":"2019-10-01","objectID":"/vim-workflow/:6:0","tags":["emoji"],"title":"A Vim Purist's Workflow","uri":"/vim-workflow/"},{"categories":["Markdown"],"content":"Markdown and Latex I began to start using Markdown to write Beamer presentations, so I added this to include latex syntax highlighting in my markdown documents command! -bang TexMarkdown :call TexMath(\u003cbang\u003e)function! TexMath(full_tex_highlighting) abort unlet b:current_syntax if a:full_tex_highlighting ==# '!'\" Source the entire Tex syntax file source $VIMRUNTIME/syntax/tex.vim\" Make highlighting work with the align environment call TexNewMathZone(\"MyAlignGroup\",\"align\",1)\" Make it so that % doesn't begin a latex comment syn clear texComment else syn include @tex syntax/tex.vim syn region mkdMath start=\"\\\\\\@\u003c!\\$\" end=\"\\$\" skip=\"\\\\\\$\" contains=@tex keepend syn region mkdMath start=\"\\\\\\@\u003c!\\$\\$\" end=\"\\$\\$\" skip=\"\\\\\\$\" contains=@tex keepend endif let b:current_syntax='markdown'\" Get all of my Latex concealments source /home/wlcsm/.config/nvim/ftplugin/tex.vimendfunction Note that running TexMarkdown included all Tex syntax highlighting, whereas TexMarkdown! includes only the equation syntax highlighting ","date":"2019-10-01","objectID":"/vim-workflow/:7:0","tags":["emoji"],"title":"A Vim Purist's Workflow","uri":"/vim-workflow/"},{"categories":["Markdown"],"content":"Plasticboy markdown let g:markdown_folding=1 let g:markdown_fenced_languages = ['rust', 'bash=sh', 'vim'] This uses Vim’s built-in features for folding and syntax highlighting for fenced languages. The only thing that would be nice is better support for the YAML header that can be provided. I don’t write documents with that header often though (only these blog posts actually` in which case I didn’t feel the need to include it ","date":"2019-10-01","objectID":"/vim-workflow/:8:0","tags":["emoji"],"title":"A Vim Purist's Workflow","uri":"/vim-workflow/"},{"categories":["Markdown"],"content":"Todo Vim Managing todo lists. I used to use a plugin for it. Now I just grep in the project directory :lgrep -R \"TODO\" . assuming you are in your project directory. This populates your location list with all the TODOs I’ve left in my project and allows me to just to each one. You can map it to a key if you plan on using it often Include Search I need to say, if you do a [I, then to go to the Nth item, just press N[\\t. Side note: I literally cannot find this documented in the manual, I may have missed it though. I only know because it is used in a suggested key mapping in the manual. Oldfile You can also use old files Marks Workflow NerdTree TODO Input the default settings and the 20vs . command Session management Just use mksession, the only problem it that it doesn’t remember unlisted buffers. i.e. the quickfix list, location list, netrw, and help pages. If you want to keep netrw open just execute setlocal bl to list the buffer, then it will remain when you same the session. TODO see if that works with the quickfix list ","date":"2019-10-01","objectID":"/vim-workflow/:9:0","tags":["emoji"],"title":"A Vim Purist's Workflow","uri":"/vim-workflow/"},{"categories":["Markdown"],"content":"Discussion of the solutions to the Day 1 and 2 Advent of Code's solutions in Rust","date":"2019-10-01","objectID":"/rust-advent-of-code-1-2/","tags":["emoji"],"title":"Advent of Code 2020 Day 1-2 in Rust","uri":"/rust-advent-of-code-1-2/"},{"categories":["Markdown"],"content":"Using Advent of Code to learn Rust Rust is a relatively new programming language that boast big benefits compared to its contemporaries. It combines the speed of C, expressiveness of Haskell, all while being memory and thread safe. I have used Rust a lot this year to implement a polynomial library for my Honours year project, and so I have only really used it for scientific computing. I have barely touched string manipulation, parsing, and so I thought it was about time that I should branch out. The Advent of Code is a set of programming challenges that are rel eased every day of December, leading up to Christmas functioning like an advent calendar. The problems are fairly basic and can normally be accomplished in under 50 lines (depending on your chosen programming language). Pr grammars often use this opportunity to learn new languages. Since I am a math major, I will be taking a very algorithmic approach to the problems and will often discuss their complexity classes. Though I hope this won’t obscure the explanation for those who are not interested in it. ","date":"2019-10-01","objectID":"/rust-advent-of-code-1-2/:1:0","tags":["emoji"],"title":"Advent of Code 2020 Day 1-2 in Rust","uri":"/rust-advent-of-code-1-2/"},{"categories":["Markdown"],"content":"Day 1 The problem can be simplified to this: Given a list of numbers, find the two entries that sum to 2020 and multiply them together. So first lets think of a couple of ways this can be done. The naive way would be to iterate through the list and add it to to every other element to see if it sums to 2020. This is nice and simple, and since we our given list is fairly short (only 200 lines) it will execute fairly quickly. fn part1_naive(expense_list: Vec\u003cusize\u003e)-\u003e usize {letn=expense_list.len();foriin0..n{forjini..n{ifexpense_list[i]+expense_list[j]==2020{returnexpense_list[i]*expense_list[j]}}}panic!(\"No two entries sum to 2020\");} However, this is not the most efficient approach. If we let $n$ denote the number of elements in the list, then this approach uses around $n^2$ operations in the worst case, since the outer loop must execute at most $n$ time, and the inner loop $n-i$ times on the $i^\\text{th}$ iteration of the outer loop. Giving a total of approximately $$ n + (n - 1) + (n - 2) + \\cdots + 1 = (n^2 - n)/2 $$ (ignoring constants) operations. More formally, this is $\\mathcal O(n^2)$, which is not the most desirable. Lets look at another technique. Notice that in the outer loop, the thing we really care about is finding a certain element. The problem is that we are performing a linear search in the inner loop to find it which makes it slow. In order to speed up the lookup time, we could use a Hash map to obtain (approximately) constant lookup time. Therefore the outer loop will iterate $n$ times, and inside the loop will be constant, which means the overall algorithm will be $O(n)$ overall. The last option seems to have worse complexity, however it actually performs the best for reasonable inputs since although the hash map has constant lookup time, that constant may be very large. To test, I made two tests, one using the default hash function in the standard library, and another using rustc_hash; a fast hash function that is highly suitable for integer keys. Here we sort the list and initialise two variable low and high to be either ends of the array. If the sum of the elements at low and high is less than 2020, then we increase low (since the list is sorted, this will increase our sum) if it is less, then we decrease high. usestd::cmp::Ordering;fn part1_fast(mutexpense_list: Vec\u003cusize\u003e)-\u003e usize {expense_list.sort();letmutlow=0;letmuthigh=expense_list.len()-1;whilelow\u003c=high{match(expense_list[low]+expense_list[high]).cmp(\u00262020){Ordering::Equal=\u003ereturnexpense_list[low]*expense_list[high],Ordering::Less=\u003elow+=1,Ordering::Greater=\u003ehigh-=1,}}panic!(\"No two entries sum to 2020\");} Here I have used the Ordering construct in the standard library to simplify the thing. Otherwise I could have written the (not as nice) ifexpense_list[low]+expense_list[high]==2020{returnexpense_list[low]*expense_list[high],}elseifexpense_list[low]+expense_list[high]\u003c2020{low+=1}else{h-=1} Now lets look at the benchmarks to see how they perform on the puzzle input (200 lines) test test::bench_fast ... bench: 3,275 ns/iter (+/- 74) test test::bench_hashmap ... bench: 10,530 ns/iter (+/- 183) test test::bench_rustc_hash ... bench: 2,875 ns/iter (+/- 156) test test::bench_naive ... bench: 5,760 ns/iter (+/- 587) It seems that choosing the right hash function can make a great impact on the performance. Though the naive algorithm didn’t perform too poorly for this test, since it is $\\mathcal O(n^2)$ we would expect it to perform much poorer on large test cases. ","date":"2019-10-01","objectID":"/rust-advent-of-code-1-2/:2:0","tags":["emoji"],"title":"Advent of Code 2020 Day 1-2 in Rust","uri":"/rust-advent-of-code-1-2/"},{"categories":["Markdown"],"content":"Part 2 Here in part 2, we iterate through the list and then call our Part 1 solution on the remainder. If we use the sorting algorithm from Part 1 we don’t need to sort the list every time, so this would naturally be the best choice of the three. Day 2 Day 2’s problem is somewhat simpler algorithmically. Here we are given a list of passwords as well as a small schema which specifies a rule the password must satisfy in order for it to be valid. So our problem is to iterate through the lines of the line and count the number of valid passwords. Now this is the kind of work I am unfamiliar with. Though I did know enough to know that regular expressions would be very useful for extracting the data. An example of a line in the input is 15-16 p: ppppppppppplppppp Which says that there needs to be 15 to 16 of the characters ‘p’ in the password ppppppppppplppppp in order for it to be valid. So we much extract 15, 16, p, ppppppppppplppppp from the text. After fiddling around a bit on Online Regex I arrived at the regular expression (\\d+)-(\\d+) (\\w): (\\w+) Let break this down a bit: \\d matches a single digit and \\w matches a non-digit character. Appending + to the end of a pattern indicates that one of more of the pattern must be present, \\d+ matches one or more digits e.g. $4$, $16$, and \\w+ matches one or more word characters e.g. foo, bar. Parentheses ( )specify a capture group which allows us to refer to each of the matches in the capture group so that we may extract the data out of the pattern after it has been matched Lets see how to do this in Rust: Add the regex crate to write by adding the line [dependencies] regex = \"1.0\" To your project’s Cargo.toml file. To create a regex we write letpass_regex=regex::Regex::new(r\"(\\d+)-(\\d+) (\\w): (\\w+)\").unwrap(); Then if we can iterate over the capture groups using letcap=pass_regex.captures_iter(\u0026line).next().unwrap();letpass=PassData{begin: cap[1].parse::\u003cusize\u003e().unwrap(),end: cap[2].parse::\u003cusize\u003e().unwrap(),chr: cap[3].parse::\u003cchar\u003e().unwrap(),pass: \u0026cap[4]}; Lets break this down: pass_regex.captures_iter(\u0026line) applies our regex to line and return an iterator over all matches (not captures!) .next().unwrap() Gets the first match of our regex. In our case we know that there is a guaranteed match and that there is only doing to be one. cap is an array which contains the captures inside the match as well as the entire match itself as the first element. For instance, if we had applied the regex to 15-16 p: ppppppppppplppppp then cap would be cap = [\"15-16 p: ppppppppppplppppp:, \"15\", \"16\", \"p\", \"ppppppppppplppppp\"] Thus all we need to do is parse our data and store it in the PassData struct. Overall this gives struct PassData\u003c'a\u003e{begin: usize,end: usize,chr: char,pass: \u0026'astr,}usestd::fs::File;usestd::io::{BufRead,BufReader};// Counts the number of passwords in \"filepath\" that are validated by the \"policy\" function fn count_valid_pass(filepath: \u0026str,policy: fn(PassData)-\u003e bool)-\u003e usize {letpass_regex=regex::Regex::new(r\"(\\d+)-(\\d+) (\\w): (\\w+)\").unwrap();letfile=File::open(filepath).unwrap();BufReader::new(file).lines().filter(|line|{letline=line.as_ref().unwrap();letcap=pass_regex.captures_iter(\u0026line).next().unwrap();letpass=PassData{begin: cap[1].parse::\u003cusize\u003e().unwrap(),end: cap[2].parse::\u003cusize\u003e().unwrap(),chr: cap[3].parse::\u003cchar\u003e().unwrap(),pass: \u0026cap[4]};policy(pass)}).count()}fn valid_password_p1(data: PassData)-\u003e bool {letoccurences=data.pass.chars().filter(|c|*c==data.chr).count();data.begin\u003c=occurences\u0026\u0026occurences\u003c=data.end} Note here that we do not need to load the whole file into memory, but rather we can process it one a time which we do here. This isn’t the best solution however as what we care about is actually parsing the data rather than validating it, which is what regular expressions are more suited towards. For this we can actually use a parser library achieve this. Chris Biscardi has a great article of how one can use the nom crate to create a parser rather than a ","date":"2019-10-01","objectID":"/rust-advent-of-code-1-2/:3:0","tags":["emoji"],"title":"Advent of Code 2020 Day 1-2 in Rust","uri":"/rust-advent-of-code-1-2/"},{"categories":["Markdown"],"content":"Part 2 Part 2 asks us to change the validation function. Fortunately, since we wrote our code in a very modular way, this is very simple fix to make. In this one, passwords are valid if either $15$ (exclusively) or $16$ is the character ‘p’. This gives us the fairly simple code below, which we may pass into the count_valid_pass function as before fn valid_password_p2(data: PassData)-\u003e bool {letmutchars=data.pass.chars();letfirst=chars.nth(data.begin-1).unwrap();letsecond=chars.nth(data.end-data.begin-1).unwrap();letxor=|a: bool,b: bool|(a\u0026\u0026!b)||(!a\u0026\u0026b);xor(first==data.chr,second==data.chr)} ","date":"2019-10-01","objectID":"/rust-advent-of-code-1-2/:4:0","tags":["emoji"],"title":"Advent of Code 2020 Day 1-2 in Rust","uri":"/rust-advent-of-code-1-2/"},{"categories":["Markdown"],"content":"Guide to emoji usage in Hugo and LoveIt.","date":"2019-10-01","objectID":"/interactive-bulk-rename-script/","tags":["emoji"],"title":"Bulk Rename Script","uri":"/interactive-bulk-rename-script/"},{"categories":["Markdown"],"content":"I spend pretty much all my time in the terminal. After some time, I find I can navigate just as fast, if not faster there than in a GUI file browser. I used to use the ultra-lightweight nnn terminal file browser, but even that I found unnecessary other than being very nice to look at. The one feature that I missed however, was bulk renaming files in my editor. When you press r in nnn, it brings up the files in the directory in the program specified in your $EDITOR variable, with numbers next to them. Here you can delete files an rename them, which if like me, you are using Vim, can be very fast. 1 a.txt 2 b.txt 3 c.txt Rather than download the 10,000 lines of C code, I decided to write a small (POSIX compliant) shell script to automate this procedure. #!/bin/sh # Output a list of files in the current directory get_files () { ls -A; } get_files | awk '{print NR \" \" $0}' \u003e /tmp/stuff.txt $EDITOR /tmp/stuff.txt if [ \"$1\" == \"-d\" ]; then echo \"Running in dry mode\" fi i=0 (read -r num new_line for line in $(get_files); do i=$((i + 1)) if [ -z \"$new_line\" ] || [ \"$num\" -gt \"$i\" ]; then [ \"$1\" == '-d' ] \u0026\u0026 echo \"Removing $line\" || rm -rf \"$line\" else if [ \"$new_line\" != \"$line\" ]; then [ \"$1\" == '-d' ] \u0026\u0026 echo \"Moving $new_lineto $line\" || mv \"$new_line\" \"$line\" fi read -r num new_line fi done) \u003c /tmp/stuff.txt It can take one argument “-d” which runs it in “dry mode”, showing the changes it would make without actually doing it You might be wondering why I did simply use ls rather than create the get_files function. This is because apparently, the ls function is not guaranteed to output the correct files all the time (literally why tho?) and should instead iterate over globs, however unless the nullglob option is set, POSIX shell will not expand the glob if there are no files in the directory which would lead to an error. The first line gets the files and uses the awk utility to attach numbers to the lines, this is so that we can detect deletions of files. If you wish to debug the program, you could simply replace the rm -rf \"$line\" with echo \"Removing $line\" and similarly with mv \"$new_line\" \"$line\". If you want you could even make this is into a debug command by passing in a command line flag and if [ \"$1\" = \"-d\" ]; then echo \"Removing $line\" else rm -rf \"$line\" fi # Or more succinctly as [ \"$1\" = \"-d\" ] \u0026\u0026 echo \"Removing $line\" || rm -rf \"$line\" Then when you call the program as rename.sh -d it will only echo the changes rather than make them ","date":"2019-10-01","objectID":"/interactive-bulk-rename-script/:0:0","tags":["emoji"],"title":"Bulk Rename Script","uri":"/interactive-bulk-rename-script/"},{"categories":["Markdown"],"content":"Guide to emoji usage in Hugo and LoveIt.","date":"2019-10-01","objectID":"/emoji-support/","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Emoji can be enabled in a Hugo project in a number of ways. The emojify function can be called directly in templates or Inline Shortcodes. To enable emoji globally, set enableEmoji to true in your site configuration and then you can type emoji shorthand codes directly in content files. These begin and end with a colon and include the code of an emoji: Gone camping! :tent: Be back soon. That is so funny! :joy: The rendered output looks like this: Gone camping! :tent: Be back soon. That is so funny! :joy: The following cheat sheet is a useful reference for emoji shorthand codes. ","date":"2019-10-01","objectID":"/emoji-support/:0:0","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Smileys \u0026 Emotion ","date":"2019-10-01","objectID":"/emoji-support/:1:0","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Face Smiling icon code icon code :grinning: grinning :smiley: smiley :smile: smile :grin: grin :laughing: laughing satisfied :sweat_smile: sweat_smile :rofl: rofl :joy: joy :slightly_smiling_face: slightly_smiling_face :upside_down_face: upside_down_face :wink: wink :blush: blush :innocent: innocent ","date":"2019-10-01","objectID":"/emoji-support/:1:1","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Face Affection icon code icon code :heart_eyes: heart_eyes :kissing_heart: kissing_heart :kissing: kissing :relaxed: relaxed :kissing_closed_eyes: kissing_closed_eyes :kissing_smiling_eyes: kissing_smiling_eyes ","date":"2019-10-01","objectID":"/emoji-support/:1:2","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Face Tongue icon code icon code :yum: yum :stuck_out_tongue: stuck_out_tongue :stuck_out_tongue_winking_eye: stuck_out_tongue_winking_eye :stuck_out_tongue_closed_eyes: stuck_out_tongue_closed_eyes :money_mouth_face: money_mouth_face ","date":"2019-10-01","objectID":"/emoji-support/:1:3","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Face Hand icon code icon code :hugs: hugs :thinking: thinking ","date":"2019-10-01","objectID":"/emoji-support/:1:4","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Face Neutral Skeptical icon code icon code :zipper_mouth_face: zipper_mouth_face :neutral_face: neutral_face :expressionless: expressionless :no_mouth: no_mouth :smirk: smirk :unamused: unamused :roll_eyes: roll_eyes :grimacing: grimacing :lying_face: lying_face ","date":"2019-10-01","objectID":"/emoji-support/:1:5","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Face Sleepy icon code icon code :relieved: relieved :pensive: pensive :sleepy: sleepy :drooling_face: drooling_face :sleeping: sleeping ","date":"2019-10-01","objectID":"/emoji-support/:1:6","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Face Unwell icon code icon code :mask: mask :face_with_thermometer: face_with_thermometer :face_with_head_bandage: face_with_head_bandage :nauseated_face: nauseated_face :sneezing_face: sneezing_face :dizzy_face: dizzy_face ","date":"2019-10-01","objectID":"/emoji-support/:1:7","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Face Hat icon code icon code :cowboy_hat_face: cowboy_hat_face ","date":"2019-10-01","objectID":"/emoji-support/:1:8","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Face Glasses icon code icon code :sunglasses: sunglasses :nerd_face: nerd_face ","date":"2019-10-01","objectID":"/emoji-support/:1:9","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Face Concerned icon code icon code :confused: confused :worried: worried :slightly_frowning_face: slightly_frowning_face :frowning_face: frowning_face :open_mouth: open_mouth :hushed: hushed :astonished: astonished :flushed: flushed :frowning: frowning :anguished: anguished :fearful: fearful :cold_sweat: cold_sweat :disappointed_relieved: disappointed_relieved :cry: cry :sob: sob :scream: scream :confounded: confounded :persevere: persevere :disappointed: disappointed :sweat: sweat :weary: weary :tired_face: tired_face ","date":"2019-10-01","objectID":"/emoji-support/:1:10","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Face Negative icon code icon code :triumph: triumph :pout: pout rage :angry: angry :smiling_imp: smiling_imp :imp: imp :skull: skull :skull_and_crossbones: skull_and_crossbones ","date":"2019-10-01","objectID":"/emoji-support/:1:11","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Face Costume icon code icon code :hankey: hankey poop shit :clown_face: clown_face :japanese_ogre: japanese_ogre :japanese_goblin: japanese_goblin :ghost: ghost :alien: alien :space_invader: space_invader :robot: robot ","date":"2019-10-01","objectID":"/emoji-support/:1:12","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Cat Face icon code icon code :smiley_cat: smiley_cat :smile_cat: smile_cat :joy_cat: joy_cat :heart_eyes_cat: heart_eyes_cat :smirk_cat: smirk_cat :kissing_cat: kissing_cat :scream_cat: scream_cat :crying_cat_face: crying_cat_face :pouting_cat: pouting_cat ","date":"2019-10-01","objectID":"/emoji-support/:1:13","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Monkey Face icon code icon code :see_no_evil: see_no_evil :hear_no_evil: hear_no_evil :speak_no_evil: speak_no_evil ","date":"2019-10-01","objectID":"/emoji-support/:1:14","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Emotion icon code icon code :kiss: kiss :love_letter: love_letter :cupid: cupid :gift_heart: gift_heart :sparkling_heart: sparkling_heart :heartpulse: heartpulse :heartbeat: heartbeat :revolving_hearts: revolving_hearts :two_hearts: two_hearts :heart_decoration: heart_decoration :heavy_heart_exclamation: heavy_heart_exclamation :broken_heart: broken_heart :heart: heart :yellow_heart: yellow_heart :green_heart: green_heart :blue_heart: blue_heart :purple_heart: purple_heart :black_heart: black_heart :100: 100 :anger: anger :boom: boom collision :dizzy: dizzy :sweat_drops: sweat_drops :dash: dash :hole: hole :bomb: bomb :speech_balloon: speech_balloon :eye_speech_bubble: eye_speech_bubble :right_anger_bubble: right_anger_bubble :thought_balloon: thought_balloon :zzz: zzz ","date":"2019-10-01","objectID":"/emoji-support/:1:15","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"People \u0026 Body ","date":"2019-10-01","objectID":"/emoji-support/:2:0","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Hand Fingers Open icon code icon code :wave: wave :raised_back_of_hand: raised_back_of_hand :raised_hand_with_fingers_splayed: raised_hand_with_fingers_splayed :hand: hand raised_hand :vulcan_salute: vulcan_salute ","date":"2019-10-01","objectID":"/emoji-support/:2:1","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Hand Fingers Partial icon code icon code :ok_hand: ok_hand :v: v :crossed_fingers: crossed_fingers :metal: metal :call_me_hand: call_me_hand ","date":"2019-10-01","objectID":"/emoji-support/:2:2","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Hand Single Finger icon code icon code :point_left: point_left :point_right: point_right :point_up_2: point_up_2 :fu: fu middle_finger :point_down: point_down :point_up: point_up ","date":"2019-10-01","objectID":"/emoji-support/:2:3","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Hand Fingers Closed icon code icon code :+1: +1 thumbsup :-1: -1 thumbsdown :fist: fist fist_raised :facepunch: facepunch fist_oncoming punch :fist_left: fist_left :fist_right: fist_right ","date":"2019-10-01","objectID":"/emoji-support/:2:4","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Hands icon code icon code :clap: clap :raised_hands: raised_hands :open_hands: open_hands :handshake: handshake :pray: pray ","date":"2019-10-01","objectID":"/emoji-support/:2:5","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Hand Prop icon code icon code :writing_hand: writing_hand :nail_care: nail_care :selfie: selfie ","date":"2019-10-01","objectID":"/emoji-support/:2:6","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Body Parts icon code icon code :muscle: muscle :ear: ear :nose: nose :eyes: eyes :eye: eye :tongue: tongue :lips: lips ","date":"2019-10-01","objectID":"/emoji-support/:2:7","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Person icon code icon code :baby: baby :boy: boy :girl: girl :blonde_man: blonde_man person_with_blond_hair :man: man :woman: woman :blonde_woman: blonde_woman :older_man: older_man :older_woman: older_woman ","date":"2019-10-01","objectID":"/emoji-support/:2:8","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Person Gesture icon code icon code :frowning_woman: frowning_woman person_frowning :frowning_man: frowning_man :person_with_pouting_face: person_with_pouting_face pouting_woman :pouting_man: pouting_man :ng_woman: ng_woman no_good no_good_woman :ng_man: ng_man no_good_man :ok_woman: ok_woman :ok_man: ok_man :information_desk_person: information_desk_person sassy_woman tipping_hand_woman :sassy_man: sassy_man tipping_hand_man :raising_hand: raising_hand raising_hand_woman :raising_hand_man: raising_hand_man :bow: bow bowing_man :bowing_woman: bowing_woman :man_facepalming: man_facepalming :woman_facepalming: woman_facepalming :man_shrugging: man_shrugging :woman_shrugging: woman_shrugging ","date":"2019-10-01","objectID":"/emoji-support/:2:9","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Person Role icon code icon code :man_health_worker: man_health_worker :woman_health_worker: woman_health_worker :man_student: man_student :woman_student: woman_student :man_teacher: man_teacher :woman_teacher: woman_teacher :man_judge: man_judge :woman_judge: woman_judge :man_farmer: man_farmer :woman_farmer: woman_farmer :man_cook: man_cook :woman_cook: woman_cook :man_mechanic: man_mechanic :woman_mechanic: woman_mechanic :man_factory_worker: man_factory_worker :woman_factory_worker: woman_factory_worker :man_office_worker: man_office_worker :woman_office_worker: woman_office_worker :man_scientist: man_scientist :woman_scientist: woman_scientist :man_technologist: man_technologist :woman_technologist: woman_technologist :man_singer: man_singer :woman_singer: woman_singer :man_artist: man_artist :woman_artist: woman_artist :man_pilot: man_pilot :woman_pilot: woman_pilot :man_astronaut: man_astronaut :woman_astronaut: woman_astronaut :man_firefighter: man_firefighter :woman_firefighter: woman_firefighter :cop: cop policeman :policewoman: policewoman :detective: detective male_detective :female_detective: female_detective :guardsman: guardsman :guardswoman: guardswoman :construction_worker: construction_worker construction_worker_man :construction_worker_woman: construction_worker_woman :prince: prince :princess: princess :man_with_turban: man_with_turban :woman_with_turban: woman_with_turban :man_with_gua_pi_mao: man_with_gua_pi_mao :man_in_tuxedo: man_in_tuxedo :bride_with_veil: bride_with_veil :pregnant_woman: pregnant_woman ","date":"2019-10-01","objectID":"/emoji-support/:2:10","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Person Fantasy icon code icon code :angel: angel :santa: santa :mrs_claus: mrs_claus ","date":"2019-10-01","objectID":"/emoji-support/:2:11","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Person Activity icon code icon code :massage: massage massage_woman :massage_man: massage_man :haircut: haircut haircut_woman :haircut_man: haircut_man :walking: walking walking_man :walking_woman: walking_woman :runner: runner running running_man :running_woman: running_woman :dancer: dancer :man_dancing: man_dancing :business_suit_levitating: business_suit_levitating :dancers: dancers dancing_women :dancing_men: dancing_men ","date":"2019-10-01","objectID":"/emoji-support/:2:12","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Person Sport icon code icon code :person_fencing: person_fencing :horse_racing: horse_racing :skier: skier :snowboarder: snowboarder :golfing_man: golfing_man :golfing_woman: golfing_woman :surfer: surfer surfing_man :surfing_woman: surfing_woman :rowboat: rowboat rowing_man :rowing_woman: rowing_woman :swimmer: swimmer swimming_man :swimming_woman: swimming_woman :basketball_man: basketball_man :basketball_woman: basketball_woman :weight_lifting_man: weight_lifting_man :weight_lifting_woman: weight_lifting_woman :bicyclist: bicyclist biking_man :biking_woman: biking_woman :mountain_bicyclist: mountain_bicyclist mountain_biking_man :mountain_biking_woman: mountain_biking_woman :man_cartwheeling: man_cartwheeling :woman_cartwheeling: woman_cartwheeling :men_wrestling: men_wrestling :women_wrestling: women_wrestling :man_playing_water_polo: man_playing_water_polo :woman_playing_water_polo: woman_playing_water_polo :man_playing_handball: man_playing_handball :woman_playing_handball: woman_playing_handball :man_juggling: man_juggling :woman_juggling: woman_juggling ","date":"2019-10-01","objectID":"/emoji-support/:2:13","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Person Resting icon code icon code :bath: bath :sleeping_bed: sleeping_bed ","date":"2019-10-01","objectID":"/emoji-support/:2:14","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Family icon code icon code :two_women_holding_hands: two_women_holding_hands :couple: couple :two_men_holding_hands: two_men_holding_hands :couplekiss_man_woman: couplekiss_man_woman :couplekiss_man_man: couplekiss_man_man :couplekiss_woman_woman: couplekiss_woman_woman :couple_with_heart: couple_with_heart couple_with_heart_woman_man :couple_with_heart_man_man: couple_with_heart_man_man :couple_with_heart_woman_woman: couple_with_heart_woman_woman :family: family family_man_woman_boy :family_man_woman_girl: family_man_woman_girl :family_man_woman_girl_boy: family_man_woman_girl_boy :family_man_woman_boy_boy: family_man_woman_boy_boy :family_man_woman_girl_girl: family_man_woman_girl_girl :family_man_man_boy: family_man_man_boy :family_man_man_girl: family_man_man_girl :family_man_man_girl_boy: family_man_man_girl_boy :family_man_man_boy_boy: family_man_man_boy_boy :family_man_man_girl_girl: family_man_man_girl_girl :family_woman_woman_boy: family_woman_woman_boy :family_woman_woman_girl: family_woman_woman_girl :family_woman_woman_girl_boy: family_woman_woman_girl_boy :family_woman_woman_boy_boy: family_woman_woman_boy_boy :family_woman_woman_girl_girl: family_woman_woman_girl_girl :family_man_boy: family_man_boy :family_man_boy_boy: family_man_boy_boy :family_man_girl: family_man_girl :family_man_girl_boy: family_man_girl_boy :family_man_girl_girl: family_man_girl_girl :family_woman_boy: family_woman_boy :family_woman_boy_boy: family_woman_boy_boy :family_woman_girl: family_woman_girl :family_woman_girl_boy: family_woman_girl_boy :family_woman_girl_girl: family_woman_girl_girl ","date":"2019-10-01","objectID":"/emoji-support/:2:15","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Person Symbol icon code icon code :speaking_head: speaking_head :bust_in_silhouette: bust_in_silhouette :busts_in_silhouette: busts_in_silhouette :footprints: footprints ","date":"2019-10-01","objectID":"/emoji-support/:2:16","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Animals \u0026 Nature ","date":"2019-10-01","objectID":"/emoji-support/:3:0","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Animal Mammal icon code icon code :monkey_face: monkey_face :monkey: monkey :gorilla: gorilla :dog: dog :dog2: dog2 :poodle: poodle :wolf: wolf :fox_face: fox_face :cat: cat :cat2: cat2 :lion: lion :tiger: tiger :tiger2: tiger2 :leopard: leopard :horse: horse :racehorse: racehorse :unicorn: unicorn :deer: deer :cow: cow :ox: ox :water_buffalo: water_buffalo :cow2: cow2 :pig: pig :pig2: pig2 :boar: boar :pig_nose: pig_nose :ram: ram :sheep: sheep :goat: goat :dromedary_camel: dromedary_camel :camel: camel :elephant: elephant :rhinoceros: rhinoceros :mouse: mouse :mouse2: mouse2 :rat: rat :hamster: hamster :rabbit: rabbit :rabbit2: rabbit2 :chipmunk: chipmunk :bat: bat :bear: bear :koala: koala :panda_face: panda_face :feet: feet paw_prints ","date":"2019-10-01","objectID":"/emoji-support/:3:1","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Animal Bird icon code icon code :turkey: turkey :chicken: chicken :rooster: rooster :hatching_chick: hatching_chick :baby_chick: baby_chick :hatched_chick: hatched_chick :bird: bird :penguin: penguin :dove: dove :eagle: eagle :duck: duck :owl: owl ","date":"2019-10-01","objectID":"/emoji-support/:3:2","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Animal Amphibian icon code icon code :frog: frog ","date":"2019-10-01","objectID":"/emoji-support/:3:3","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Animal Reptile icon code icon code :crocodile: crocodile :turtle: turtle :lizard: lizard :snake: snake :dragon_face: dragon_face :dragon: dragon ","date":"2019-10-01","objectID":"/emoji-support/:3:4","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Animal Marine icon code icon code :whale: whale :whale2: whale2 :dolphin: dolphin flipper :fish: fish :tropical_fish: tropical_fish :blowfish: blowfish :shark: shark :octopus: octopus :shell: shell ","date":"2019-10-01","objectID":"/emoji-support/:3:5","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Animal Bug icon code icon code :snail: snail :butterfly: butterfly :bug: bug :ant: ant :bee: bee honeybee :beetle: beetle :spider: spider :spider_web: spider_web :scorpion: scorpion ","date":"2019-10-01","objectID":"/emoji-support/:3:6","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Plant Flower icon code icon code :bouquet: bouquet :cherry_blossom: cherry_blossom :white_flower: white_flower :rosette: rosette :rose: rose :wilted_flower: wilted_flower :hibiscus: hibiscus :sunflower: sunflower :blossom: blossom :tulip: tulip ","date":"2019-10-01","objectID":"/emoji-support/:3:7","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Plant Other icon code icon code :seedling: seedling :evergreen_tree: evergreen_tree :deciduous_tree: deciduous_tree :palm_tree: palm_tree :cactus: cactus :ear_of_rice: ear_of_rice :herb: herb :shamrock: shamrock :four_leaf_clover: four_leaf_clover :maple_leaf: maple_leaf :fallen_leaf: fallen_leaf :leaves: leaves ","date":"2019-10-01","objectID":"/emoji-support/:3:8","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Food \u0026 Drink ","date":"2019-10-01","objectID":"/emoji-support/:4:0","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Food Fruit icon code icon code :grapes: grapes :melon: melon :watermelon: watermelon :mandarin: mandarin orange tangerine :lemon: lemon :banana: banana :pineapple: pineapple :apple: apple :green_apple: green_apple :pear: pear :peach: peach :cherries: cherries :strawberry: strawberry :kiwi_fruit: kiwi_fruit :tomato: tomato ","date":"2019-10-01","objectID":"/emoji-support/:4:1","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Food Vegetable icon code icon code :avocado: avocado :eggplant: eggplant :potato: potato :carrot: carrot :corn: corn :hot_pepper: hot_pepper :cucumber: cucumber :mushroom: mushroom :peanuts: peanuts :chestnut: chestnut ","date":"2019-10-01","objectID":"/emoji-support/:4:2","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Food Prepared icon code icon code :bread: bread :croissant: croissant :baguette_bread: baguette_bread :pancakes: pancakes :cheese: cheese :meat_on_bone: meat_on_bone :poultry_leg: poultry_leg :bacon: bacon :hamburger: hamburger :fries: fries :pizza: pizza :hotdog: hotdog :taco: taco :burrito: burrito :stuffed_flatbread: stuffed_flatbread :egg: egg :fried_egg: fried_egg :shallow_pan_of_food: shallow_pan_of_food :stew: stew :green_salad: green_salad :popcorn: popcorn ","date":"2019-10-01","objectID":"/emoji-support/:4:3","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Food Asian icon code icon code :bento: bento :rice_cracker: rice_cracker :rice_ball: rice_ball :rice: rice :curry: curry :ramen: ramen :spaghetti: spaghetti :sweet_potato: sweet_potato :oden: oden :sushi: sushi :fried_shrimp: fried_shrimp :fish_cake: fish_cake :dango: dango ","date":"2019-10-01","objectID":"/emoji-support/:4:4","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Food Marine icon code icon code :crab: crab :shrimp: shrimp :squid: squid ","date":"2019-10-01","objectID":"/emoji-support/:4:5","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Food Sweet icon code icon code :icecream: icecream :shaved_ice: shaved_ice :ice_cream: ice_cream :doughnut: doughnut :cookie: cookie :birthday: birthday :cake: cake :chocolate_bar: chocolate_bar :candy: candy :lollipop: lollipop :custard: custard :honey_pot: honey_pot ","date":"2019-10-01","objectID":"/emoji-support/:4:6","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Drink icon code icon code :baby_bottle: baby_bottle :milk_glass: milk_glass :coffee: coffee :tea: tea :sake: sake :champagne: champagne :wine_glass: wine_glass :cocktail: cocktail :tropical_drink: tropical_drink :beer: beer :beers: beers :clinking_glasses: clinking_glasses :tumbler_glass: tumbler_glass ","date":"2019-10-01","objectID":"/emoji-support/:4:7","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Dishware icon code icon code :plate_with_cutlery: plate_with_cutlery :fork_and_knife: fork_and_knife :spoon: spoon :hocho: hocho knife :amphora: amphora ","date":"2019-10-01","objectID":"/emoji-support/:4:8","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Travel \u0026 Places ","date":"2019-10-01","objectID":"/emoji-support/:5:0","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Place Map icon code icon code :earth_africa: earth_africa :earth_americas: earth_americas :earth_asia: earth_asia :globe_with_meridians: globe_with_meridians :world_map: world_map :japan: japan ","date":"2019-10-01","objectID":"/emoji-support/:5:1","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Place Geographic icon code icon code :mountain_snow: mountain_snow :mountain: mountain :volcano: volcano :mount_fuji: mount_fuji :camping: camping :beach_umbrella: beach_umbrella :desert: desert :desert_island: desert_island :national_park: national_park ","date":"2019-10-01","objectID":"/emoji-support/:5:2","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Place Building icon code icon code :stadium: stadium :classical_building: classical_building :building_construction: building_construction :houses: houses :derelict_house: derelict_house :house: house :house_with_garden: house_with_garden :office: office :post_office: post_office :european_post_office: european_post_office :hospital: hospital :bank: bank :hotel: hotel :love_hotel: love_hotel :convenience_store: convenience_store :school: school :department_store: department_store :factory: factory :japanese_castle: japanese_castle :european_castle: european_castle :wedding: wedding :tokyo_tower: tokyo_tower :statue_of_liberty: statue_of_liberty ","date":"2019-10-01","objectID":"/emoji-support/:5:3","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Place Religious icon code icon code :church: church :mosque: mosque :synagogue: synagogue :shinto_shrine: shinto_shrine :kaaba: kaaba ","date":"2019-10-01","objectID":"/emoji-support/:5:4","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Place Other icon code icon code :fountain: fountain :tent: tent :foggy: foggy :night_with_stars: night_with_stars :cityscape: cityscape :sunrise_over_mountains: sunrise_over_mountains :sunrise: sunrise :city_sunset: city_sunset :city_sunrise: city_sunrise :bridge_at_night: bridge_at_night :hotsprings: hotsprings :carousel_horse: carousel_horse :ferris_wheel: ferris_wheel :roller_coaster: roller_coaster :barber: barber :circus_tent: circus_tent ","date":"2019-10-01","objectID":"/emoji-support/:5:5","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Transport Ground icon code icon code :steam_locomotive: steam_locomotive :railway_car: railway_car :bullettrain_side: bullettrain_side :bullettrain_front: bullettrain_front :train2: train2 :metro: metro :light_rail: light_rail :station: station :tram: tram :monorail: monorail :mountain_railway: mountain_railway :train: train :bus: bus :oncoming_bus: oncoming_bus :trolleybus: trolleybus :minibus: minibus :ambulance: ambulance :fire_engine: fire_engine :police_car: police_car :oncoming_police_car: oncoming_police_car :taxi: taxi :oncoming_taxi: oncoming_taxi :car: car red_car :oncoming_automobile: oncoming_automobile :blue_car: blue_car :truck: truck :articulated_lorry: articulated_lorry :tractor: tractor :racing_car: racing_car :motorcycle: motorcycle :motor_scooter: motor_scooter :bike: bike :kick_scooter: kick_scooter :busstop: busstop :motorway: motorway :railway_track: railway_track :oil_drum: oil_drum :fuelpump: fuelpump :rotating_light: rotating_light :traffic_light: traffic_light :vertical_traffic_light: vertical_traffic_light :stop_sign: stop_sign :construction: construction ","date":"2019-10-01","objectID":"/emoji-support/:5:6","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Transport Water icon code icon code :anchor: anchor :boat: boat sailboat :canoe: canoe :speedboat: speedboat :passenger_ship: passenger_ship :ferry: ferry :motor_boat: motor_boat :ship: ship ","date":"2019-10-01","objectID":"/emoji-support/:5:7","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Transport Air icon code icon code :airplane: airplane :small_airplane: small_airplane :flight_departure: flight_departure :flight_arrival: flight_arrival :seat: seat :helicopter: helicopter :suspension_railway: suspension_railway :mountain_cableway: mountain_cableway :aerial_tramway: aerial_tramway :artificial_satellite: artificial_satellite :rocket: rocket ","date":"2019-10-01","objectID":"/emoji-support/:5:8","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Hotel icon code icon code :bellhop_bell: bellhop_bell ","date":"2019-10-01","objectID":"/emoji-support/:5:9","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Time icon code icon code :hourglass: hourglass :hourglass_flowing_sand: hourglass_flowing_sand :watch: watch :alarm_clock: alarm_clock :stopwatch: stopwatch :timer_clock: timer_clock :mantelpiece_clock: mantelpiece_clock :clock12: clock12 :clock1230: clock1230 :clock1: clock1 :clock130: clock130 :clock2: clock2 :clock230: clock230 :clock3: clock3 :clock330: clock330 :clock4: clock4 :clock430: clock430 :clock5: clock5 :clock530: clock530 :clock6: clock6 :clock630: clock630 :clock7: clock7 :clock730: clock730 :clock8: clock8 :clock830: clock830 :clock9: clock9 :clock930: clock930 :clock10: clock10 :clock1030: clock1030 :clock11: clock11 :clock1130: clock1130 ","date":"2019-10-01","objectID":"/emoji-support/:5:10","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Sky \u0026 Weather icon code icon code :new_moon: new_moon :waxing_crescent_moon: waxing_crescent_moon :first_quarter_moon: first_quarter_moon :moon: moon waxing_gibbous_moon :full_moon: full_moon :waning_gibbous_moon: waning_gibbous_moon :last_quarter_moon: last_quarter_moon :waning_crescent_moon: waning_crescent_moon :crescent_moon: crescent_moon :new_moon_with_face: new_moon_with_face :first_quarter_moon_with_face: first_quarter_moon_with_face :last_quarter_moon_with_face: last_quarter_moon_with_face :thermometer: thermometer :sunny: sunny :full_moon_with_face: full_moon_with_face :sun_with_face: sun_with_face :star: star :star2: star2 :stars: stars :milky_way: milky_way :cloud: cloud :partly_sunny: partly_sunny :cloud_with_lightning_and_rain: cloud_with_lightning_and_rain :sun_behind_small_cloud: sun_behind_small_cloud :sun_behind_large_cloud: sun_behind_large_cloud :sun_behind_rain_cloud: sun_behind_rain_cloud :cloud_with_rain: cloud_with_rain :cloud_with_snow: cloud_with_snow :cloud_with_lightning: cloud_with_lightning :tornado: tornado :fog: fog :wind_face: wind_face :cyclone: cyclone :rainbow: rainbow :closed_umbrella: closed_umbrella :open_umbrella: open_umbrella :umbrella: umbrella :parasol_on_ground: parasol_on_ground :zap: zap :snowflake: snowflake :snowman_with_snow: snowman_with_snow :snowman: snowman :comet: comet :fire: fire :droplet: droplet :ocean: ocean ","date":"2019-10-01","objectID":"/emoji-support/:5:11","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Activities ","date":"2019-10-01","objectID":"/emoji-support/:6:0","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Event icon code icon code :jack_o_lantern: jack_o_lantern :christmas_tree: christmas_tree :fireworks: fireworks :sparkler: sparkler :sparkles: sparkles :balloon: balloon :tada: tada :confetti_ball: confetti_ball :tanabata_tree: tanabata_tree :bamboo: bamboo :dolls: dolls :flags: flags :wind_chime: wind_chime :rice_scene: rice_scene :ribbon: ribbon :gift: gift :reminder_ribbon: reminder_ribbon :tickets: tickets :ticket: ticket ","date":"2019-10-01","objectID":"/emoji-support/:6:1","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Award Medal icon code icon code :medal_military: medal_military :trophy: trophy :medal_sports: medal_sports :1st_place_medal: 1st_place_medal :2nd_place_medal: 2nd_place_medal :3rd_place_medal: 3rd_place_medal ","date":"2019-10-01","objectID":"/emoji-support/:6:2","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Sport icon code icon code :soccer: soccer :baseball: baseball :basketball: basketball :volleyball: volleyball :football: football :rugby_football: rugby_football :tennis: tennis :bowling: bowling :cricket: cricket :field_hockey: field_hockey :ice_hockey: ice_hockey :ping_pong: ping_pong :badminton: badminton :boxing_glove: boxing_glove :martial_arts_uniform: martial_arts_uniform :goal_net: goal_net :golf: golf :ice_skate: ice_skate :fishing_pole_and_fish: fishing_pole_and_fish :running_shirt_with_sash: running_shirt_with_sash :ski: ski ","date":"2019-10-01","objectID":"/emoji-support/:6:3","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Game icon code icon code :dart: dart :8ball: 8ball :crystal_ball: crystal_ball :video_game: video_game :joystick: joystick :slot_machine: slot_machine :game_die: game_die :spades: spades :hearts: hearts :diamonds: diamonds :clubs: clubs :black_joker: black_joker :mahjong: mahjong :flower_playing_cards: flower_playing_cards ","date":"2019-10-01","objectID":"/emoji-support/:6:4","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Arts \u0026 Crafts icon code icon code :performing_arts: performing_arts :framed_picture: framed_picture :art: art ","date":"2019-10-01","objectID":"/emoji-support/:6:5","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Objects ","date":"2019-10-01","objectID":"/emoji-support/:7:0","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Clothing icon code icon code :eyeglasses: eyeglasses :dark_sunglasses: dark_sunglasses :necktie: necktie :shirt: shirt tshirt :jeans: jeans :dress: dress :kimono: kimono :bikini: bikini :womans_clothes: womans_clothes :purse: purse :handbag: handbag :pouch: pouch :shopping: shopping :school_satchel: school_satchel :mans_shoe: mans_shoe shoe :athletic_shoe: athletic_shoe :high_heel: high_heel :sandal: sandal :boot: boot :crown: crown :womans_hat: womans_hat :tophat: tophat :mortar_board: mortar_board :rescue_worker_helmet: rescue_worker_helmet :prayer_beads: prayer_beads :lipstick: lipstick :ring: ring :gem: gem ","date":"2019-10-01","objectID":"/emoji-support/:7:1","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Sound icon code icon code :mute: mute :speaker: speaker :sound: sound :loud_sound: loud_sound :loudspeaker: loudspeaker :mega: mega :postal_horn: postal_horn :bell: bell :no_bell: no_bell ","date":"2019-10-01","objectID":"/emoji-support/:7:2","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Music icon code icon code :musical_score: musical_score :musical_note: musical_note :notes: notes :studio_microphone: studio_microphone :level_slider: level_slider :control_knobs: control_knobs :microphone: microphone :headphones: headphones :radio: radio ","date":"2019-10-01","objectID":"/emoji-support/:7:3","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Musical Instrument icon code icon code :saxophone: saxophone :guitar: guitar :musical_keyboard: musical_keyboard :trumpet: trumpet :violin: violin :drum: drum ","date":"2019-10-01","objectID":"/emoji-support/:7:4","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Phone icon code icon code :iphone: iphone :calling: calling :phone: phone telephone :telephone_receiver: telephone_receiver :pager: pager :fax: fax ","date":"2019-10-01","objectID":"/emoji-support/:7:5","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Computer icon code icon code :battery: battery :electric_plug: electric_plug :computer: computer :desktop_computer: desktop_computer :printer: printer :keyboard: keyboard :computer_mouse: computer_mouse :trackball: trackball :minidisc: minidisc :floppy_disk: floppy_disk :cd: cd :dvd: dvd ","date":"2019-10-01","objectID":"/emoji-support/:7:6","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Light \u0026 Video icon code icon code :movie_camera: movie_camera :film_strip: film_strip :film_projector: film_projector :clapper: clapper :tv: tv :camera: camera :camera_flash: camera_flash :video_camera: video_camera :vhs: vhs :mag: mag :mag_right: mag_right :candle: candle :bulb: bulb :flashlight: flashlight :izakaya_lantern: izakaya_lantern lantern ","date":"2019-10-01","objectID":"/emoji-support/:7:7","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Book Paper icon code icon code :notebook_with_decorative_cover: notebook_with_decorative_cover :closed_book: closed_book :book: book open_book :green_book: green_book :blue_book: blue_book :orange_book: orange_book :books: books :notebook: notebook :ledger: ledger :page_with_curl: page_with_curl :scroll: scroll :page_facing_up: page_facing_up :newspaper: newspaper :newspaper_roll: newspaper_roll :bookmark_tabs: bookmark_tabs :bookmark: bookmark :label: label ","date":"2019-10-01","objectID":"/emoji-support/:7:8","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Money icon code icon code :moneybag: moneybag :yen: yen :dollar: dollar :euro: euro :pound: pound :money_with_wings: money_with_wings :credit_card: credit_card :chart: chart ","date":"2019-10-01","objectID":"/emoji-support/:7:9","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Mail icon code icon code :email: email envelope :e-mail: :e-mail: :incoming_envelope: incoming_envelope :envelope_with_arrow: envelope_with_arrow :outbox_tray: outbox_tray :inbox_tray: inbox_tray :package: package :mailbox: mailbox :mailbox_closed: mailbox_closed :mailbox_with_mail: mailbox_with_mail :mailbox_with_no_mail: mailbox_with_no_mail :postbox: postbox :ballot_box: ballot_box ","date":"2019-10-01","objectID":"/emoji-support/:7:10","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Writing icon code icon code :pencil2: pencil2 :black_nib: black_nib :fountain_pen: fountain_pen :pen: pen :paintbrush: paintbrush :crayon: crayon :memo: memo pencil ","date":"2019-10-01","objectID":"/emoji-support/:7:11","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Office icon code icon code :briefcase: briefcase :file_folder: file_folder :open_file_folder: open_file_folder :card_index_dividers: card_index_dividers :date: date :calendar: calendar :spiral_notepad: spiral_notepad :spiral_calendar: spiral_calendar :card_index: card_index :chart_with_upwards_trend: chart_with_upwards_trend :chart_with_downwards_trend: chart_with_downwards_trend :bar_chart: bar_chart :clipboard: clipboard :pushpin: pushpin :round_pushpin: round_pushpin :paperclip: paperclip :paperclips: paperclips :straight_ruler: straight_ruler :triangular_ruler: triangular_ruler :scissors: scissors :card_file_box: card_file_box :file_cabinet: file_cabinet :wastebasket: wastebasket ","date":"2019-10-01","objectID":"/emoji-support/:7:12","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Lock icon code icon code :lock: lock :unlock: unlock :lock_with_ink_pen: lock_with_ink_pen :closed_lock_with_key: closed_lock_with_key :key: key :old_key: old_key ","date":"2019-10-01","objectID":"/emoji-support/:7:13","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Tool icon code icon code :hammer: hammer :pick: pick :hammer_and_pick: hammer_and_pick :hammer_and_wrench: hammer_and_wrench :dagger: dagger :crossed_swords: crossed_swords :gun: gun :bow_and_arrow: bow_and_arrow :shield: shield :wrench: wrench :nut_and_bolt: nut_and_bolt :gear: gear :clamp: clamp :balance_scale: balance_scale :link: link :chains: chains ","date":"2019-10-01","objectID":"/emoji-support/:7:14","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Science icon code icon code :alembic: alembic :microscope: microscope :telescope: telescope :satellite: satellite ","date":"2019-10-01","objectID":"/emoji-support/:7:15","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Medical icon code icon code :syringe: syringe :pill: pill ","date":"2019-10-01","objectID":"/emoji-support/:7:16","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Household icon code icon code :door: door :bed: bed :couch_and_lamp: couch_and_lamp :toilet: toilet :shower: shower :bathtub: bathtub :shopping_cart: shopping_cart ","date":"2019-10-01","objectID":"/emoji-support/:7:17","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Other Object icon code icon code :smoking: smoking :coffin: coffin :funeral_urn: funeral_urn :moyai: moyai ","date":"2019-10-01","objectID":"/emoji-support/:7:18","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Symbols ","date":"2019-10-01","objectID":"/emoji-support/:8:0","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Transport Sign icon code icon code :atm: atm :put_litter_in_its_place: put_litter_in_its_place :potable_water: potable_water :wheelchair: wheelchair :mens: mens :womens: womens :restroom: restroom :baby_symbol: baby_symbol :wc: wc :passport_control: passport_control :customs: customs :baggage_claim: baggage_claim :left_luggage: left_luggage ","date":"2019-10-01","objectID":"/emoji-support/:8:1","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Warning icon code icon code :warning: warning :children_crossing: children_crossing :no_entry: no_entry :no_entry_sign: no_entry_sign :no_bicycles: no_bicycles :no_smoking: no_smoking :do_not_litter: do_not_litter :non-potable_water: :non-potable_water: :no_pedestrians: no_pedestrians :no_mobile_phones: no_mobile_phones :underage: underage :radioactive: radioactive :biohazard: biohazard ","date":"2019-10-01","objectID":"/emoji-support/:8:2","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Arrow icon code icon code :arrow_up: arrow_up :arrow_upper_right: arrow_upper_right :arrow_right: arrow_right :arrow_lower_right: arrow_lower_right :arrow_down: arrow_down :arrow_lower_left: arrow_lower_left :arrow_left: arrow_left :arrow_upper_left: arrow_upper_left :arrow_up_down: arrow_up_down :left_right_arrow: left_right_arrow :leftwards_arrow_with_hook: leftwards_arrow_with_hook :arrow_right_hook: arrow_right_hook :arrow_heading_up: arrow_heading_up :arrow_heading_down: arrow_heading_down :arrows_clockwise: arrows_clockwise :arrows_counterclockwise: arrows_counterclockwise :back: back :end: end :on: on :soon: soon :top: top ","date":"2019-10-01","objectID":"/emoji-support/:8:3","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Religion icon code icon code :place_of_worship: place_of_worship :atom_symbol: atom_symbol :om: om :star_of_david: star_of_david :wheel_of_dharma: wheel_of_dharma :yin_yang: yin_yang :latin_cross: latin_cross :orthodox_cross: orthodox_cross :star_and_crescent: star_and_crescent :peace_symbol: peace_symbol :menorah: menorah :six_pointed_star: six_pointed_star ","date":"2019-10-01","objectID":"/emoji-support/:8:4","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Zodiac icon code icon code :aries: aries :taurus: taurus :gemini: gemini :cancer: cancer :leo: leo :virgo: virgo :libra: libra :scorpius: scorpius :sagittarius: sagittarius :capricorn: capricorn :aquarius: aquarius :pisces: pisces :ophiuchus: ophiuchus ","date":"2019-10-01","objectID":"/emoji-support/:8:5","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Av Symbol icon code icon code :twisted_rightwards_arrows: twisted_rightwards_arrows :repeat: repeat :repeat_one: repeat_one :arrow_forward: arrow_forward :fast_forward: fast_forward :next_track_button: next_track_button :play_or_pause_button: play_or_pause_button :arrow_backward: arrow_backward :rewind: rewind :previous_track_button: previous_track_button :arrow_up_small: arrow_up_small :arrow_double_up: arrow_double_up :arrow_down_small: arrow_down_small :arrow_double_down: arrow_double_down :pause_button: pause_button :stop_button: stop_button :record_button: record_button :cinema: cinema :low_brightness: low_brightness :high_brightness: high_brightness :signal_strength: signal_strength :vibration_mode: vibration_mode :mobile_phone_off: mobile_phone_off ","date":"2019-10-01","objectID":"/emoji-support/:8:6","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Math icon code icon code :heavy_multiplication_x: heavy_multiplication_x :heavy_plus_sign: heavy_plus_sign :heavy_minus_sign: heavy_minus_sign :heavy_division_sign: heavy_division_sign ","date":"2019-10-01","objectID":"/emoji-support/:8:7","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Punctuation icon code icon code :bangbang: bangbang :interrobang: interrobang :question: question :grey_question: grey_question :grey_exclamation: grey_exclamation :exclamation: exclamation heavy_exclamation_mark :wavy_dash: wavy_dash ","date":"2019-10-01","objectID":"/emoji-support/:8:8","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Currency icon code icon code :currency_exchange: currency_exchange :heavy_dollar_sign: heavy_dollar_sign ","date":"2019-10-01","objectID":"/emoji-support/:8:9","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Keycap icon code icon code :hash: hash :asterisk: asterisk :zero: zero :one: one :two: two :three: three :four: four :five: five :six: six :seven: seven :eight: eight :nine: nine :keycap_ten: keycap_ten ","date":"2019-10-01","objectID":"/emoji-support/:8:10","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Alphabet icon code icon code :capital_abcd: capital_abcd :abcd: abcd :1234: 1234 :symbols: symbols :abc: abc :a: a :ab: ab :b: b :cl: cl :cool: cool :free: free :information_source: information_source :id: id :m: m :new: new :ng: ng :o2: o2 :ok: ok :parking: parking :sos: sos :up: up :vs: vs :koko: koko :sa: sa :u6708: u6708 :u6709: u6709 :u6307: u6307 :ideograph_advantage: ideograph_advantage :u5272: u5272 :u7121: u7121 :u7981: u7981 :accept: accept :u7533: u7533 :u5408: u5408 :u7a7a: u7a7a :congratulations: congratulations :secret: secret :u55b6: u55b6 :u6e80: u6e80 ","date":"2019-10-01","objectID":"/emoji-support/:8:11","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Geometric icon code icon code :red_circle: red_circle :large_blue_circle: large_blue_circle :black_circle: black_circle :white_circle: white_circle :black_large_square: black_large_square :white_large_square: white_large_square :black_medium_square: black_medium_square :white_medium_square: white_medium_square :black_medium_small_square: black_medium_small_square :white_medium_small_square: white_medium_small_square :black_small_square: black_small_square :white_small_square: white_small_square :large_orange_diamond: large_orange_diamond :large_blue_diamond: large_blue_diamond :small_orange_diamond: small_orange_diamond :small_blue_diamond: small_blue_diamond :small_red_triangle: small_red_triangle :small_red_triangle_down: small_red_triangle_down :diamond_shape_with_a_dot_inside: diamond_shape_with_a_dot_inside :radio_button: radio_button :white_square_button: white_square_button :black_square_button: black_square_button ","date":"2019-10-01","objectID":"/emoji-support/:8:12","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Other Symbol icon code icon code :recycle: recycle :fleur_de_lis: fleur_de_lis :trident: trident :name_badge: name_badge :beginner: beginner :o: o :white_check_mark: white_check_mark :ballot_box_with_check: ballot_box_with_check :heavy_check_mark: heavy_check_mark :x: x :negative_squared_cross_mark: negative_squared_cross_mark :curly_loop: curly_loop :loop: loop :part_alternation_mark: part_alternation_mark :eight_spoked_asterisk: eight_spoked_asterisk :eight_pointed_black_star: eight_pointed_black_star :sparkle: sparkle :copyright: copyright :registered: registered :tm: tm ","date":"2019-10-01","objectID":"/emoji-support/:8:13","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Flags ","date":"2019-10-01","objectID":"/emoji-support/:9:0","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Common Flags icon code icon code :checkered_flag: checkered_flag :triangular_flag_on_post: triangular_flag_on_post :crossed_flags: crossed_flags :black_flag: black_flag :white_flag: white_flag :rainbow_flag: rainbow_flag ","date":"2019-10-01","objectID":"/emoji-support/:9:1","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Country and Region Flags icon code icon code :andorra: andorra :united_arab_emirates: united_arab_emirates :afghanistan: afghanistan :antigua_barbuda: antigua_barbuda :anguilla: anguilla :albania: albania :armenia: armenia :angola: angola :antarctica: antarctica :argentina: argentina :american_samoa: american_samoa :austria: austria :australia: australia :aruba: aruba :aland_islands: aland_islands :azerbaijan: azerbaijan :bosnia_herzegovina: bosnia_herzegovina :barbados: barbados :bangladesh: bangladesh :belgium: belgium :burkina_faso: burkina_faso :bulgaria: bulgaria :bahrain: bahrain :burundi: burundi :benin: benin :st_barthelemy: st_barthelemy :bermuda: bermuda :brunei: brunei :bolivia: bolivia :caribbean_netherlands: caribbean_netherlands :brazil: brazil :bahamas: bahamas :bhutan: bhutan :botswana: botswana :belarus: belarus :belize: belize :canada: canada :cocos_islands: cocos_islands :congo_kinshasa: congo_kinshasa :central_african_republic: central_african_republic :congo_brazzaville: congo_brazzaville :switzerland: switzerland :cote_divoire: cote_divoire :cook_islands: cook_islands :chile: chile :cameroon: cameroon :cn: cn :colombia: colombia :costa_rica: costa_rica :cuba: cuba :cape_verde: cape_verde :curacao: curacao :christmas_island: christmas_island :cyprus: cyprus :czech_republic: czech_republic :de: de :djibouti: djibouti :denmark: denmark :dominica: dominica :dominican_republic: dominican_republic :algeria: algeria :ecuador: ecuador :estonia: estonia :egypt: egypt :western_sahara: western_sahara :eritrea: eritrea :es: es :ethiopia: ethiopia :eu: eu european_union :finland: finland :fiji: fiji :falkland_islands: falkland_islands :micronesia: micronesia :faroe_islands: faroe_islands :fr: fr :gabon: gabon :gb: gb uk :grenada: grenada :georgia: georgia :french_guiana: french_guiana :guernsey: guernsey :ghana: ghana :gibraltar: gibraltar :greenland: greenland :gambia: gambia :guinea: guinea :guadeloupe: guadeloupe :equatorial_guinea: equatorial_guinea :greece: greece :south_georgia_south_sandwich_islands: south_georgia_south_sandwich_islands :guatemala: guatemala :guam: guam :guinea_bissau: guinea_bissau :guyana: guyana :hong_kong: hong_kong :honduras: honduras :croatia: croatia :haiti: haiti :hungary: hungary :canary_islands: canary_islands :indonesia: indonesia :ireland: ireland :israel: israel :isle_of_man: isle_of_man :india: india :british_indian_ocean_territory: british_indian_ocean_territory :iraq: iraq :iran: iran :iceland: iceland :it: it :jersey: jersey :jamaica: jamaica :jordan: jordan :jp: jp :kenya: kenya :kyrgyzstan: kyrgyzstan :cambodia: cambodia :kiribati: kiribati :comoros: comoros :st_kitts_nevis: st_kitts_nevis :north_korea: north_korea :kr: kr :kuwait: kuwait :cayman_islands: cayman_islands :kazakhstan: kazakhstan :laos: laos :lebanon: lebanon :st_lucia: st_lucia :liechtenstein: liechtenstein :sri_lanka: sri_lanka :liberia: liberia :lesotho: lesotho :lithuania: lithuania :luxembourg: luxembourg :latvia: latvia :libya: libya :morocco: morocco :monaco: monaco :moldova: moldova :montenegro: montenegro :madagascar: madagascar :marshall_islands: marshall_islands :macedonia: macedonia :mali: mali :myanmar: myanmar :mongolia: mongolia :macau: macau :northern_mariana_islands: northern_mariana_islands :martinique: martinique :mauritania: mauritania :montserrat: montserrat :malta: malta :mauritius: mauritius :maldives: maldives :malawi: malawi :mexico: mexico :malaysia: malaysia :mozambique: mozambique :namibia: namibia :new_caledonia: new_caledonia :niger: niger :norfolk_island: norfolk_island :nigeria: nigeria :nicaragua: nicaragua :netherlands: netherlands :norway: norway :nepal: nepal :nauru: nauru :niue: niue :new_zealand: new_zealand :oman: oman :panama: panama :peru: peru :french_polynesia: french_polynesia :papua_new_guinea: papua_new_guinea :philippines: philippines :pakistan: pakistan :poland: poland :st_pierre_miquelon: st_pierre_miquelon :pitcairn_islands: pitcairn_islands :puerto_rico: puerto_","date":"2019-10-01","objectID":"/emoji-support/:9:2","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Documentation of my Email setup","date":"2019-10-01","objectID":"/mail-setup/","tags":["emoji"],"title":"Mail Setup","uri":"/mail-setup/"},{"categories":["Markdown"],"content":"Email My email setup is a little complicated because I maintain a local copy of my mail on my computer for backup reasons. It is also nice because it is faster. I use Neomutt which is a terminal based email client. This is because I like the minimalism and I just think that email is something that is so fundamental that it should be in a terminal. I have tried other lightweight clients like Sylpheed and I still prefer it. (I do like Apple Mail though). picture However, in case you don’t want to go down that rabbit hole, I will present my configuration in layers of difficulty. These being Using Neomutt (a terminal-based client) without downloading locally Storing local mail Automatic synchronisation and desktop notifications This works on Linux and Apple, not a clue whether it works on windows ","date":"2019-10-01","objectID":"/mail-setup/:0:0","tags":["emoji"],"title":"Mail Setup","uri":"/mail-setup/"},{"categories":["Markdown"],"content":"Neomutt Here we will setup a minimum example ","date":"2019-10-01","objectID":"/mail-setup/:1:0","tags":["emoji"],"title":"Mail Setup","uri":"/mail-setup/"},{"categories":["Markdown"],"content":"Storing local mail I spent way too long trying to do this before and about a month after I finally started using it properly, I discovered Luke Smith’s mutt-wizard which handles all of it for you as well as providing sane defaults and color schemes I will briefly go over what mutt-wizard sets up. Previously we used IMAP to carry out all of our mailbox operations. Now we will be performing all of them locally (which is much faster!), and then using isync (or mbsync as it was previously known) to synchronise the local changes with your remote mail server. This goes the other way as well, when changes happen to the remote server, like receiving new mail, that also gets downloaded. Once all the mail is nice and synchronised in our local computer, we need to index the mail in order to actually access it in a reasonable way. The indexer does things such as searching for mail, filtering by different tags and so on. Neomutt acts mainly as a front-end for it, though Neomutt also has its own built-in capability. Since so much work is done by notmuch you can just use a more lightweight front-end. For simplicity we will just be using Neomutt here because thats what mutt-wizard uses. So now lets see what happens Synchronise mail (isync) Index mail (notmuch) View mail (neomutt) Send mail (msmpt) So to synchronise our mailboxes (and hence get new mail) we can run mbsync -a to synchronise all mailboxes, or mbsync \u003cyour.email@address\u003e\" to synchronise a specific mailbox. To index mail, we just need to run the notmuch new command to update the notmuch database To view mail we just type neomutt To start the Neomutt client. It has Vim navigation (thanks to the mutt-wizard script). You can type h to find all the other commands Though the exact key binding may be different with some mail providers offering different mailboxes, some common useful ones are: o - Get new mail for this mailbox O - Get new mail for all mailboxes ga - Go to archive (if your mailbox has one by default. Gmail doesn’t) gt - Go to Trash gs - Go to Sent Ma - Move to archive Mt - Move to trash ","date":"2019-10-01","objectID":"/mail-setup/:2:0","tags":["emoji"],"title":"Mail Setup","uri":"/mail-setup/"},{"categories":["Markdown"],"content":"Automatically poll for mail and desktop notifications I first note that you can make it so that it runs without polling whenever you get new mail using the IMAP IDLE API, a good program for this is goimapnotify arch wiki. However after trying this method, I decided to only poll every 30min otherwise I found myself dashing to answer every email that popped up and it was distracting my work flow. Let make a little script that: synchronises our mailboxes, indexes the mail, and makes a desktop notification if there is new mail get-mail.sh #!/usr/bin/env bash # Sync with remote mailbox mbsync -a # Index new mail locally and save the final line of standard output NEWMAIL=$(notmuch new | tail -1) # Make a notification with the final line of output with no expiry time if [[ \"$NEWMAIL\" =~ No\\ new\\ mail.* ]]; then notify-send -t 100000 \"$NEWMAIL\" fi In the second line we take the last line of the notmuch new command which indicates the number of new files (as well if any other changes occurred) and if there was mail, then we make a desktop notification which expires in 100000 seconds with the contents of the last line. Then make this file executable with chmod +x get-mail.sh ","date":"2019-10-01","objectID":"/mail-setup/:3:0","tags":["emoji"],"title":"Mail Setup","uri":"/mail-setup/"},{"categories":["Markdown"],"content":"Automatically calling it Now we need to autmatically call the program every X mins. This is specific to your operating system, Mac has launchd, Linux has crontab or systemd. We are using linux so the simplest option is probably to make a cron job, however since I have been meaning to become better at linux server administration, I decided to use systemd’s timers. First we make a service /etc/systemd/user/get-mail.service [Unit] Description=Get mail Type=oneshot [Service] ExecStart=/bin/sh /usr/bin/getmail Then a following timer to call the service every 30mins [Unit] Description=Run my \"get-mail\" service every 30 mins [Timer] OnBootSec=30min OnUnitActiveSec=30min [Install] WantedBy=timers.target we can then start this with systemctl --user daemon-reload systemctl --user enable get-mail.timer systemctl --user start get-mail we can see the active timers with systemctl --user list-timers to get an output like NEXT LEFT LAST PASSED UNIT ACTIVATES Sun 2020-12-20 02:17:06 EST 5min left Sat 2020-12-19 02:17:06 EST 23h ago systemd-tmpfiles-clean.timer systemd-tmpfiles-clean.service Sun 2020-12-20 02:19:06 EST 7min left Sun 2020-12-20 02:09:06 EST 2min 42s ago get-mail.timer get-mail.service n/a n/a Fri 2020-12-18 02:13:47 EST 1 day 23h ago grub-boot-success.timer grub-boot-success.service 3 timers listed. Pass --all to see loaded but inactive timers, too. We can see the next time the get-mail.timer to run. If you see n/a in the NEXT section then something has gone wrong. You can check the logs using journalctl --user -u get-mail ","date":"2019-10-01","objectID":"/mail-setup/:3:1","tags":["emoji"],"title":"Mail Setup","uri":"/mail-setup/"},{"categories":["Markdown"],"content":"Markdown to HTML Using sed","date":"2019-10-01","objectID":"/sed-markdown-compiler/","tags":["emoji"],"title":"Markdown to HTML Using sed","uri":"/sed-markdown-compiler/"},{"categories":["Markdown"],"content":"I recently discovered the :TOhtml command in Vim. It converts the current view of the file you are editing in Vim to HTML that can be viewed in the browser. TODO I think it has some other use cases too However, it would be nice if it could actually render the Markdown file I was editing too. I looked at the common solutions like pandoc but I found that they were incredibly huge programs. I decided to ignore the extra features and see if I could make a minimalistic program to convert plain Markdown to html. It isn’t perfect, but most of what I need it to do can be done with the following sed script: # Markdown to HTML render 1r header.html # Wraps paragraphs in the \u003cp\u003e\u003c/p\u003e tags /^\\w/{H;$!d} /^$/{x;/./s/\\(.*\\)/\u003cp\u003e\\1\u003c\\/p\u003e/} # ###.* to \u003chN\u003e s/^# \\(.*\\)/\u003ch1\u003e\\1\u003c\\/h1\u003e/ s/^## \\(.*\\)/\u003ch2\u003e\\1\u003c\\/h2\u003e/ s/^### \\(.*\\)/\u003ch3\u003e\\1\u003c\\/h3\u003e/ s/^#### \\(.*\\)/\u003ch4\u003e\\1\u003c\\/h4\u003e/ s/^##### \\(.*\\)/\u003ch5\u003e\\1\u003c\\/h5\u003e/ s/^###### \\(.*\\)/\u003ch6\u003e\\1\u003c\\/h6\u003e/ # '*' or '-' or '+' to \u003cli\u003e s/^\\s*[\\*-+]\\s*\\(.*\\)/\u003cli\u003e\\1\u003c\\/li\u003e/ # [title](url) to \u003ca href=\"url\"\u003etitle\u003c/a\u003e s/\\[\\(.*\\)\\](\\(.*\\))/\u003ca href=\"\\2\"\u003e\\1\u003c\\/a\u003e/g $r footer.html You will also need the header and footer for the HTML file. This is up to you but I chose these simple templates header.sh \u003c!DOCTYPE HTML\u003e \u003chtml\u003e \u003chead\u003e \u003cmeta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\"\u003e \u003ctitle\u003eTesting\u003c/title\u003e footer.html \u003c/body\u003e \u003c/html\u003e To run it. Save the file as markdown-to-html.sed and execute it on a markdown file file.md as sed -f markdown-to-html.sed file.md ","date":"2019-10-01","objectID":"/sed-markdown-compiler/:0:0","tags":["emoji"],"title":"Markdown to HTML Using sed","uri":"/sed-markdown-compiler/"},{"categories":["Markdown"],"content":"Using nvim-lsp for Go","date":"2019-10-01","objectID":"/nvim-lsp_from_coc/","tags":["emoji"],"title":"Using nvim-lsp for Go","uri":"/nvim-lsp_from_coc/"},{"categories":["Markdown"],"content":"Now that nvim 0.5 is now stable I decided to finally try moving from CoC to the builtin LSP client nvim-lsp. This is mainly because its more minimalist and faster. I previously trried the nvim-lsp back in unstable a year ago but I just couldn’t get things to work properly. There was a lot of configuration, and after a day or so I still couldn’t get it to reliably work. Now that 0.5 is stable I figured that they have solved the problems by now. I am now using a differnt language now (Go instead of Rust) though I doubt that was the problem. Overall I still find the experience not as smooth as I would have hoped but everything is working fairly nicely now so I’m happy. The main thing to note it that the configuration is still not as simple as with CoC which is probably why it hasn’t caught on as much as CoC did. Yes it fairly straight forward for the knowledgable Vim user, to whom spending an hour setting up LSP support is considdered a victory. I don’t see this being used by people just coming to vim. With CoC it was a VSCode-like, plug’n’play experience where you could copy a tutorial config (of which there are many compared to nvim-lsp tutorials) do a quick ‘:CocInstall’ and you’re done, everything works right out of the box. Here, I still had many isses Requirements This is only supported in Nvim 0.5. This is currently. You will need to install ‘nvim-lspconfig’ to enable Heres what we are going to setup. There is a link to the full config down below, but otherwise we are going to set it up in logically separate steps LSP - ‘nvim-lspconfig’. Gives linting errors, go to definition/declaration/type declaration/rename etc nvim-cmp - Autocompletion engine. Press Ctrl-N to get a list of all possible values Telescope - Show off some fuzzy finding ","date":"2019-10-01","objectID":"/nvim-lsp_from_coc/:0:0","tags":["emoji"],"title":"Using nvim-lsp for Go","uri":"/nvim-lsp_from_coc/"},{"categories":["Markdown"],"content":"LSP ","date":"2019-10-01","objectID":"/nvim-lsp_from_coc/:1:0","tags":["emoji"],"title":"Using nvim-lsp for Go","uri":"/nvim-lsp_from_coc/"},{"categories":["Markdown"],"content":"Vim's Tags support","date":"2019-10-01","objectID":"/vim-lesson-tags/","tags":["emoji"],"title":"Vim Features: Tags list","uri":"/vim-lesson-tags/"},{"categories":["Markdown"],"content":"This is how you get that IDE like feeling where you can navigate around codebases super fast. This is built-in, no plugins, no configurations ","date":"2019-10-01","objectID":"/vim-lesson-tags/:0:0","tags":["emoji"],"title":"Vim Features: Tags list","uri":"/vim-lesson-tags/"},{"categories":["Markdown"],"content":"What are tags Tags are an outline of your codebase, they record the location of important definitions like functions, type definitions, class definitions. ","date":"2019-10-01","objectID":"/vim-lesson-tags/:1:0","tags":["emoji"],"title":"Vim Features: Tags list","uri":"/vim-lesson-tags/"},{"categories":["Markdown"],"content":"Getting Started Download ctags, also known as Exhuberant Tags, and run ctags -R . in your project root directory. Unless your codebase is quite large, this should be close to instaneous. You will notice that a file call tags has now been created in the root directory. You can open that file to see all the tags that have been generated, it should like something like this TODO make tags for something Now open Vim and position the cursor over the name of a function or type/class and press Ctrl-]. Vim should have jumped to the definition. Since Vim recognises this action as a ‘jump’, you can press Ctrl-O to return back you your original positions, and Ctrl-I to jump back forward. You can also let Vim autocomplete tags with the Ctrl-X Ctrl-t command in insert mode, and if you want to say find the BufferReader struct, you can type :tag Buf and hit tab to let Vim show you all the matches, once you have found it, execute :tag BufferReader to jump to the tag. Another interesting feature is the preview window, you can use pts BufferReader and Vim will open the definition in the ‘preview window’, this window behave pretty much exactly like any other, except you can do (TODO preview next) to cycle through multiple matches and Ctrl-W z to close it quickly. Its essentially Vim’s solution to the hover preview that LSPs provide. There is also a tag stack and also a ts command that I forgot. You should probably make a keymapping for these and also for rebuilding the tags file ","date":"2019-10-01","objectID":"/vim-lesson-tags/:2:0","tags":["emoji"],"title":"Vim Features: Tags list","uri":"/vim-lesson-tags/"},{"categories":["Markdown"],"content":"Vim for Software Development","date":"2019-10-01","objectID":"/vim-as-developer/","tags":["emoji"],"title":"Vim for Software Development","uri":"/vim-as-developer/"},{"categories":["Markdown"],"content":"Most people think Vim is an outdated piece of software development, useful perhaps editing small files over SSH, but surely no one uses it as their main code development tool right? Here I am going to go through what I think are the key components to a normal software development. Of course, Vim doesn’t give you the complex build environemtns of a proper IDE, but if you are working comfortably in another text editor like VS Code or Sublime Text, then theres a good chance that everything you are doing can be done in vanilla Vim. Thats right, I’m going to show all these things with a minimal vimrc with no plugins. Small note: I am actually talking about Neovim rather than Vim. Its the same thing but a better code base and friendlier community, and also sets many sane defaults (which means our vimrc can be even smaller!) First, what do we want out of a text editor for software development: Browse Files Goto definition Autocompletion Build/Run/Test code ","date":"2019-10-01","objectID":"/vim-as-developer/:0:0","tags":["emoji"],"title":"Vim for Software Development","uri":"/vim-as-developer/"},{"categories":["Markdown"],"content":"Browse files If you are used to VS Code’s project drawer set-up where you have a line on the side to view your files, you can install the NerdTree plugin which is used by many, or the preinstalled netrw file viewer. Just type :30vs . to spawn a side window 30 columns wide, in a vertical split, in the current working directory. My default it doesn’t behave quite like VSCode’s (but NerdTree does), but we can change that by using the tips in this blog putting the following lines in your vimrc let g:netrw_banner = 0let g:netrw_liststyle = 3let g:netrw_browse_split = 4let g:netrw_altv = 1let g:netrw_winsize = 25augroup ProjectDrawer autocmd! autocmd VimEnter * :Vexploreaugroup END Now netrw will open in the split whenever you enter Vim and behave how the same as in VS Code. Searching for files: :find \u003cfile name\u003e Note that this will search in the current working directory for Vim, this is the current working directory in your terminal when you start Vim. If you want to see what it is currently set to, :pwd, if you want to change it :cd \u003cnew directory\u003e You can use wildcards to fuzzy match :find *.txt Will find all txt files etc. If you want recursive searching for files just use :set path+=** To search inside files we can all use grep, which is a wrapper around the grep shell utility. :grep \u003cargs\u003e This executes the shell command grep -n \u003cargs\u003e and feeds the output into the quickfix list for you to easily navigate. You can use lgrep to put them into the location list. More here on how to use the Quickfix list If you would prefer to use a different searching program, set the grepprg which is the shell command Vim will use to find the matches. It is set to grep -n by defualt. Just make sure the output includes the filename and the line number so that Vim can help you easily navigate to them, this is why Vim uses the -n option in grep to add the line numbers For example, I prefer to use ripgrep because it’s faster. I also do a fair amount of Rust programmings at the moment and so I don’t want Vim to search in the targets directory (the build directory in rust), so I have this in my rust filetype plugin file set grepprg=rg\\ -rn\\ -g\\ '!target/**' So that it uses ripgrep rg with line numbers, and ignores the target directory ","date":"2019-10-01","objectID":"/vim-as-developer/:1:0","tags":["emoji"],"title":"Vim for Software Development","uri":"/vim-as-developer/"},{"categories":["Markdown"],"content":"Goto Definition/Hover There are actually many actions for this in Vim because Vim doesn’t perform lexical analysis TODO is it lexical? There are several main mechanisms: gd: Goes to the first occurrence on the object in the current method. Note that this only really works with some language that have the concept of a ‘method’ defined, namely bracket delimited languages Include search: This actually searches through the current file and all files that this file imports (provided that the includepath variable has been correctly configure). Pressing [I will list all the occurrences of the word under the cursor in these files. If you want to go to the Nth line in the list it shows, press N[\\t, that it, the number, then a [, then a tab. (at can’t even find this is in the manual lol). There are actually many more navigation commands with include search, to see the all, use :h include-search Tags: This is probably the greatest thing. There is also a preview window which you could use kind of like the hover functionality given by LSPs. TODO vim-lsp: Technically in Neovim 5.0, this is no longer a plug-in. It is definitely very useful, however I haven’t really needed to use it as I’ve found that using tags for definitions of: functions, type, etc. and include search for variables has been more than I need for all of my development. Note: If you use cscope then you can also use tags for local variable names too. Also note the use of marks when you want to return to older positions TODO expand ","date":"2019-10-01","objectID":"/vim-as-developer/:2:0","tags":["emoji"],"title":"Vim for Software Development","uri":"/vim-as-developer/"},{"categories":["Markdown"],"content":"Autocompletion Vim has some really great autocompletion. You can press Ctrl-n in insert mode to get the generic completion, which will actually match on things in the dictionary as well as words in any open buffer. You can also press, Ctrl-I to get completion from include search (even if the included files are not in a buffer), Ctrl-f to autocomplete file name, I use this so much…, there’s a tag completions I thing as well. The only thing that is missing is method completion, (TODO is it though?) ","date":"2019-10-01","objectID":"/vim-as-developer/:3:0","tags":["emoji"],"title":"Vim for Software Development","uri":"/vim-as-developer/"},{"categories":["Markdown"],"content":"Vim Tricks: Building and Running code","date":"2019-10-01","objectID":"/vim-lesson-make/","tags":["emoji"],"title":"Vim Tricks: Building and Running code","uri":"/vim-lesson-make/"},{"categories":["Markdown"],"content":"Vim has a built in support for building files through the :make command. First you will want to set your compiler so that Vim knows what command it should run with make and what the error format should be when it parses it in the quickfix/location list. ","date":"2019-10-01","objectID":"/vim-lesson-make/:0:0","tags":["emoji"],"title":"Vim Tricks: Building and Running code","uri":"/vim-lesson-make/"},{"categories":["Markdown"],"content":"Build/Run/Test Code I would say this is one of the other big reasons people don’t use Vim. However Vim actually has fairly good support for this as well. Of course you aren’t going to get the same level as an IDE, but TODO We use the make command. This defaults to running make in the terminal and outputting the errors into the Quickfix list for you to easily navigate. If you want to change the make program, simply set a different makeprg. For rust I have it set to set makeprg=cargo\\ check\\ % Note that you need to escape spaces with a backslash, and that ‘%’ denotes the current file’s name in Vim. Also if you want the LSP-like experience where you want Vim to be constantly telling you about the errors, then you can just make an autocomand to tell Vim to run the make command every time you write to the buffer, however, I’d recommend first reading the next paragraph The most annoying thing about this, that I’m still surprise Vim has is that this runs the make command in the foreground… i.e. the rest of Vim is suspended until it finished. That is just crazy, the idea is mainly just to do syntax check which should be very quick but still, its quite annoying especially if you wanted it to run after every write. Now there are plugins for this, however, I stole this code from someone TODO who command! -nargs=* BgMake \\ silent execute \":!(make \" . \"\u003cargs\u003e\" . \" \u003e /tmp/make.output 2\u003e\u00261\" \\ redraw! | cfile /tmp/make.output | copen Which runs the come in the background. You can also make it send a notification when its done if you are doing a very long build command! -nargs=* BgMake \\ silent execute \":!(make \" . \"\u003cargs\u003e\" . \" \u003e /tmp/make.output 2\u003e\u00261;\" \\ \"notify-send 'make finished' 'make \u003cargs\u003e finished') \u0026\" | \\ redraw! | cfile /tmp/make.output | copen Just run :BgMake \u003cargs\u003e instead of make \u003cargs\u003e and you are good to go. ","date":"2019-10-01","objectID":"/vim-lesson-make/:1:0","tags":["emoji"],"title":"Vim Tricks: Building and Running code","uri":"/vim-lesson-make/"},{"categories":["Markdown"],"content":"Custom error formats ","date":"2019-10-01","objectID":"/vim-lesson-make/:2:0","tags":["emoji"],"title":"Vim Tricks: Building and Running code","uri":"/vim-lesson-make/"},{"categories":["Markdown"],"content":"Vim's Quickfix/Location list","date":"2019-10-01","objectID":"/vim-lesson-quickfix-list/","tags":["emoji"],"title":"Vim's Quickfix/Location list","uri":"/vim-lesson-quickfix-list/"},{"categories":["Markdown"],"content":"People often complain that Vim doesn’t have good support for project-wide searches or error navigation without the use of plugins or even LSPs. These people have clearly never learned about Vim’s inbuilt quickfix and location list. ","date":"2019-10-01","objectID":"/vim-lesson-quickfix-list/:0:0","tags":["emoji"],"title":"Vim's Quickfix/Location list","uri":"/vim-lesson-quickfix-list/"},{"categories":["Markdown"],"content":"Quickfix list The quickfix list is a buffer in Vim which provides fast navigation to locations in files. ","date":"2019-10-01","objectID":"/vim-lesson-quickfix-list/:1:0","tags":["emoji"],"title":"Vim's Quickfix/Location list","uri":"/vim-lesson-quickfix-list/"},{"categories":["Markdown"],"content":"Differences between the Quickfix and Location list The two are exactly the same, however there is only one quickfix list per Vim session, but there is one location list for every window. For this reason, the quickfix list is normally used for the errors of your program or build results, whereas the location list is normally used for things like grep. However you can use either for anything. Every command for the quickfix list has an equivalent for the location list. Command | Quickfix | Location Open | copen | lopen Next entry | cnext | lnext Make | make | lmake Grep | grep | lgrep Older list | colder | lolder There are heaps more, but for the rest of this post I will just be presenting the quickfix variant with the understanding that everything has a location list equivalent ","date":"2019-10-01","objectID":"/vim-lesson-quickfix-list/:2:0","tags":["emoji"],"title":"Vim's Quickfix/Location list","uri":"/vim-lesson-quickfix-list/"},{"categories":["Markdown"],"content":"Using So here’s an example problem. I need to build my program and find the errors. I’ve set make to run go build which presents me with a list of errors. Side note: to make that initial pop-up display of the errors disappear, just run :silent make (I’d recommend mapping this to a key). Use the output of make to build a file. More on that here. Depending on the code you are running you may have to set a compiler so that Vim knows how it should parse the output. Notice that if there were errors, Vim will automatically jump to the location of the first error (you can stop that by running :make!). To go to the next error press :cnext. Now type :clist to get a pop-up of which error you are located at in the list. To get an interactive list, type :copen to open an interactive buffer for the quickfix list. Pressing Enter on any entry in this buffer will make you jump to the error. Tim Pope has a plug-in which makes some good default mappings for this, or you could just do :cn and then press @: which repeats the last ex command Press :clist to get a little pop-up of the quickfix lists and a ","date":"2019-10-01","objectID":"/vim-lesson-quickfix-list/:3:0","tags":["emoji"],"title":"Vim's Quickfix/Location list","uri":"/vim-lesson-quickfix-list/"},{"categories":null,"content":"  LoveIt is a clean, elegant but advanced blog theme for Hugo developed by Dillon. It is based on the original LeaveIt Theme and KeepIt Theme. Hugo Theme LoveItHugo Theme LoveIt \" Hugo Theme LoveIt ","date":"2019-08-02","objectID":"/about/:0:0","tags":null,"title":"About LoveIt","uri":"/about/"},{"categories":null,"content":"Features Performance and SEO  Optimized for performance: 99/100 on mobile and 100/100 on desktop in Google PageSpeed Insights  Optimized SEO performance with a correct SEO SCHEMA based on JSON-LD  Google Analytics supported  Fathom Analytics supported  Search engine verification supported (Google, Bind, Yandex and Baidu)  CDN for third-party libraries supported  Automatically converted images with Lazy Load by lazysizes Appearance and Layout / Responsive layout / Light/Dark mode  Globally consistent design language  Pagination supported  Easy-to-use and self-expanding table of contents  Multilanguage supported and i18n ready  Beautiful CSS animation Social and Comment Systems  Gravatar supported by Gravatar  Local Avatar supported  Up to 64 social links supported  Up to 28 share sites supported  Disqus comment system supported by Disqus  Gitalk comment system supported by Gitalk  Valine comment system supported by Valine  Facebook comments system supported by Facebook  Telegram comments system supported by Comments  Commento comment system supported by Commento  Utterances comment system supported by Utterances Extended Features  Search supported by Lunr.js or algolia  Twemoji supported  Automatically highlighting code  Copy code to clipboard with one click  Images gallery supported by lightgallery.js  Extended Markdown syntax for Font Awesome icons  Extended Markdown syntax for ruby annotation  Extended Markdown syntax for fraction  Mathematical formula supported by $ \\KaTeX $  Diagrams shortcode supported by mermaid  Interactive data visualization shortcode supported by ECharts  Mapbox shortcode supported by Mapbox GL JS  Music player shortcode supported by APlayer and MetingJS  Bilibili player shortcode  Kinds of admonitions shortcode  Custom style shortcode  Custom script shortcode  Animated typing supported by TypeIt  Dynamic scroll supported by Smooth Scroll  Cookie consent banner supported by cookieconsent … ","date":"2019-08-02","objectID":"/about/:0:1","tags":null,"title":"About LoveIt","uri":"/about/"},{"categories":null,"content":"License LoveIt is licensed under the MIT license. Check the LICENSE file for details. Thanks to the authors of following resources included in the theme: normalize.css Font Awesome Simple Icons Animate.css Smooth Scroll autocomplete.js Lunr.js algoliasearch lazysizes object-fit-images Twemoji lightgallery.js clipboard.js Sharer.js TypeIt $ \\KaTeX $ mermaid ECharts Mapbox GL JS APlayer MetingJS Gitalk Valine cookieconsent ","date":"2019-08-02","objectID":"/about/:0:2","tags":null,"title":"About LoveIt","uri":"/about/"}]